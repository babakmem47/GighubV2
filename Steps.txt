

1. Install 2 extentions: Productivity Power Tools and Web Essentials

2. Prepare Requirements Document, then extract use cases from it, then extract core usecases

3. Add 6 use case to Git project: "Add a gig" to 'In progress' column. the other 5 to 'To do' column

4. Disjoin ApplicationDbContext.cs from IdentityModels in separate class.

5. Change the name of IdentityModels.cs to ApplicationUser.cs in order to be the same with it's class.

6. Enable-Migrations

7. Change Web.config to point to SQLServer on LND Server to create Database over there.

8. Add-Migration InitialModel

9. Update-Database

10. Create Gig.cs and Genre.cs

11. Add Gig and Genre DbSet to ApplicationDbContext in order to add refrence to them.

12. Add-Migration CreateGigGenreTables And Update-Database

13. Change Web.config to point to LapTop SQL and Update-Database.

14. Override Convention (Data Annotations method) to Gig and Genre classes.

15. Add-Migration OverrideConventionsForGigsAndGenres + Update-Database.

16. Add-Migration PopulateGenresTable + Fill Sql to generated migration class + Update-Database.

////// Building a view (not concern about saving data or validation or aesthetics...)  /////////////////
////// just purely user interface for adding a gig									   /////////////////
////// Create a simple form to allow us to capture a gig	  						   /////////////////
17. Create Gigs Controller + Change the name of default Action from Index to Create

18. Create corresponding view (Alt+Enter on View)

////// Add a link to Navigation bar to this View ////////////
19. in _Layout.chtml create link : Add a Gig

20. Add Bootstrap form to Create.chtml : Add model + Add TextBox for Venue

////// Create 2 TextBox for Date and Time in View //////////
////// We have a problem because in Mode we dont have separate fields for date and time ///////
21. Create a Folder name ViewModels + Create GigFormViewModel.cs with 3 prop: Venue, Date and Time +ge
	Change the model of view from Gig to GigFormViewModel + create 2 TextBoxs for Date and Time + 
	Build project (because we add new class)

22. Add DropDownList for Genre in Form + Add property "int Genre" to GigFormViewModel.cs + 
	Add IEnumerable<Genre> Genres to provide second argument for DropDownList(for source of data :options) +
	Build project (because change C# code in GigFormViewModel) => Refresh gets error because Genres is empty
	In Gigs Controller get the list of Genres from the database + make blank item selected as default in DrDList.

23. Add bootstrap Button


////////////////////////////////////// 06. Saving Data /////////////////////////////////////////////////
///// First We nedd to control aceess to GigForm : only for an authenticated artist ////////////////////
24. Decorate Create action with [Authorize], Then create a user: artist1 to enable to access "Add a Gig" action. 

///// Specify the target in the form for Save button to post info back to controller /////
25. @using (Html.BeginForm("Create, "Gigs")) instead of <form>

26. Create HttpPost Action "Create" to Save a gig to the database. We need to change viewmodel to gig object.

//////////////////// Optimization of HttpPost Create Action //////////////////////////////
/// the code in this stage is not optimize because we have 3 query of database 
/// we can define foreign key for Artist and Genre do avoid unnecessary queries 
/// benefit of Foreign KEy: they save us from unnecessary queries to load related objects. 
27. Add ArtistId and GenreId to Gig.cs (make them required instead of its navigation property.

28. Add-Migration AddForeignKeyPropertiesToGig + Update-Database
	in gig object: replace Artist with ArtistId and Genre with GenreId

29. Remove 2 unnecessary queries from HttpPost Create Action and refactoring code.

/////////////// Separation of concern : Responsibility of Controller and View ////////////
/// Controller not responsible for parsing string value into DateTime object.  
/// Controller should act as a coordinator for application logic: WHAT SHOULD HAPPEN NEXT! 
/// Controller is like a manager. Not do the actual work. 
/// Information Expert Principle: Class/Object that has the information to do sth, should be the one  
/// that will carry that responsibility. So the viewModel is the class that knows about Date and Time!
30. Transfer the parsing Date and Time task from Controller to ViewModel class.

///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////// 07. Implementing Validation /////////////////////////////////////
/////////////////////////// Server Side Validation ///////////////////////////////////////
31. 1. Make view model prop required. 2. Add placeholder in view for validation messages 3. Modify Controller: ModelState.IsValid

/// We get an error when not filling textboxes : String was not recognized as a valid DateTime
/// in line 27: get { return DateTime.Parse(string.Format("{0} {1}", Date, Time)); }
/// technically we should not have get this error because apparently it should not reach the line of code for referencing Date and Time.
/// Reason: because mvc use its "reflection" to construct a viewmodel. So its going to touch all prop of viewmodel.
/// Fix Issue: we need to convert this property to a method => mvc not anymore touch datetime property using reflection
32. Convert DateTime prop of viewmodel to GetDateTime() method to avoid reflection error.

/// We get another error : Value cannot be null. Parameter name: items for DropDownList in view ///
/// Reason: Genres is not populated(not initialized)
33. Populate Genres prop of viewmodel before send it back to view.

/////// Implementing Custom Validation for Date and Time (Server Side) ////////
/// Add FutureDate.cs that derive from ValidationAttribute. Add Override IsValid method in it. 
/// Decorate Date prop of viewmodel to [FutureDate] 
/// => at runtime, value parameter in IsValid method in FutureDate would be a value of Date prop in viewmodel
/// At FutureDate.cs perform Date validation and return the result
34. Add FutureDate.cs & override IsValid method in it & decorate Date prop of viewmodel to [FutureDate]

35. Add ValidTime.cs & override IsValid method in it & decorate Time prop of viewmodel to [ValidTime]

/////////////////////// Client Side Validation ///////////////////////////////////////////
/// To check if it is enable -> Inspect - Network tab - click Save : We can see the post request "Create" send to Server
/// Reason : we have not enabled client side validation!
/////// Enabling Client Side Validation /////////
/// There are 2 js files that are responsible for validation in jquery: jquery.validate.js and jquery.validate.unobtrusive.js
/// Microsoft put these 2 files in separate bundle to return them to only pages where we need them.
/// Idea of Bundle : we can get one or more js/css files, put them in a bundle and then at runtime 
/// asp.net will combine them and compress them before returning to the client(for optimization)
/// We do not need to sent them to every request from client. So we need to add jqueryval bundle to our Create.chtml
/// @RenderSection in _Layout.chtml : use for adding additional scripts to a page. So in that section we add jquery validation.
36. Add @section scripts with jqueryval bundle to Create view for client side validation.

// The reason we need section scripts in view : to ensure that the jqueryval bundle comes after jquery definition.
// at this point both jquery and bootstrap are downloaded
// Fresh Download of page from server : add ? at the end of url - Clear all request in Network tab then Save.



///////////////////////// 08. Preventing Common Web Application Vulnerabilities //////////////////////////////
////////////// SQL Injection ////////////////////
/// Allow an attacker to execute malicious SQL statements in your application. : Get the list of all users, delete a record...
/// var sql = "select * from users where userId = " + userId  => input: "1243 or 1" always true
/// change sql = "select * from users where userId = @userId"
/// in out application we dont have this vulnerability because we are not generating sql at runtime => let EF generate sql statements
/// DANGEROUS: _context.Gigs.SqlQuery("select * ...", input)

///////// Cross-site Scripting (XSS)//////////////
/// Enable an attacker to execute malicious script on the victim's computer : they steal the user's cookies and highjack session
/// They can also access to user's Geo-Location, Webcam, File System and ...
/// Attacker insert malicious js into the pages of trusted website.
/// Prevent : 1. Escaping content: tell browser to treat the content as a simple string and not interprete at any other way.
/// <script> --> Escape: &lt;script&gt;
/// in out application we dont have this vulnerability because MVC rejects js in the input fileds of the form.
/// also Razor view automatically escape content.	Exception: Html.Raw()

//////// Cross-site Request Forgery (CSRF)////////
/// Allow an attacker to perform actions on behalf of a user without their knowledge.
/// Prevent: use @Html.AntiForgeryToken() in view and decorate [ValidateAntiForgeryToken] in Controller
37. Add @Html.AntiForgeryToken() in Create.chtml and decorate Create action with [ValidateAntiForgeryToken]

/// inspect - Elements - in Form : <input ...type="hidden" value="Random Token" ...>  This is the first part(Generate hidden field)
/// Second part: Its also created a cookie that includes the encripted version of this token:  
/// to see this encrypted token: in inspect go to Application - Cookies - __RequestVerificationToken
/// The attacker may be able to steals the user's cookie but they won't have access to hidden field because
/// the only way to get the hidden field is to get the user to visit the trusted page! not the malicious page.
/// Test: Delete random token(value="random token") and try to post 


/////////////////////////////// 09. Moving Towards a Beautiful Design ////////////////////////////////////////
///// Change the color of navigation bar /////////
/// R-click on it and inspect: click on its parents(<div class="navbar navbar-inverse navbar-fixed-top">) 
/// change backgrounf-color="FF4342" and border-color="FF4342" in the right 
/// Add these changes to our stylesheet: 
/// copy the right side of inspect, open Site.css, at the end of it add a comment: /* Bootstrap Override */ then paste the css

//////////// Make the links white ////////////////
/// R-click on one link + inspect: at right .navbar-inverse .navbar-nav : change the color="#FFF" + copy and paste to Site.css

///////// Make 'Application name' white //////////
/// R-click on one link + inspect: at right .navbar-inverse .navbar-brand : change the color="#FFF" + copy and paste to Site.css
38. Bootstrap Override: find the proper css with the help of inspect elements and copy and paste it at the end of Site.css and Save.
/// To force chrome to reaload css and js: CTRL + SHIFT + R

////////////// Choosing a Font ///////////////////
/// Go to fonts.google.com. Choose Open Sans & Lato & Montserrat => +Select this font. 
/// In customize select font size regular:400 bold:700
/// Copy entire embeded line href and open _Layout.chtml and paste it in <Head> just before Render and Save
/// To compare and feel changes: open Home page on another tab too and do the following change in it:
/// R-click on any character - Inspect - Computed tab - Find font-family - click to go to definition in css
/// Notice that we have definition on line 313: bootstrap.css:313
/// select 'Helvetica Neue' and change it to 'Open Sans' and Enter. Still not feel any changes!
/// We need to change the Heading fonts also : R-Click on a heading. on the right it is a section for h1 h2 h3 ... h6
/// Notice that we have definition on line 474: bootstrap.css:474 
/// select 'Helvetica Neue' and change it to 'Open Sans' and Enter. 
/// Now we can compare it to old tab!!! specially headings are changed
/// To change in VS : Open bootstrap.css Search for 'Helv'. copy h1,h2,... to Site.css. Add Lato in front of another fonts
/// Insert 'body,' at the beginnig of block. Delete 'line-height' and 'color' lines. Delete unwanted font from <link href=...>
39. Add <link href...> for wanted font in <head> in _Layout.chtml. Copy related css from bootstrap and paste in in Site.css

//////// Increase the margin of DIV //////////////
/// R-Click on a lable. Hold the mouse pointer on <div class="form-group"> : Blue area is div and yellow area is the margin
/// With the <div class="form-group" selected : on the right side we can change 'margin-bottom' with arrow key up and down.
/// Increase it to 20px. Copy the block of css and paste at the end of Site.css

/////// Increase the Font Size of NavBar /////////
/// R-Click on a text in page. Go to Computed -> font-size -> go to definition -> increase to 17px;
/// Create body { font-size: 17px;} above h1,h2,h3... in Site.css

/////// Increase the font size inside inputs /////
/// R-Click on a text inside an input. in the right side in form-control, find font-size and increase it to 17px;. Or
/// instead we can Go to Computed -> font-size -> go to definition -> increase to 17px;
/// Create .form-control { font-size: 17px;} at the bottom of Site.css

//////// Increase Padding/Size of TextBoxes //////
/// Out TextBoxes are too small. We want more chunky TextBox
/// R-Click on a TextBox. in the right side in form-control, find padding and increase it to 20px; 15px;
/// add 'padding: 20px 15px;' in .form-control block that we already created in Site.css

/////// Add more Roundness to the TextBoxes //////
/// add 'border-radius: 9px;' in .form-control block that we already created in Site.css

///////// Improve the look of Button /////////////
/// .btn { font-size: 17px; padding: 7px 20px; border-radius: 9px;}
40. Increase DIV margin, Font size and shape and roundness of elements in form

//// Dissapearing Inputs Hover/Shadow Effect /////
/// R-Click on a TextBox. in the right : click on :hov(Toggle element state) -> tick :focus -> .form-control:focus { } appears!
/// Untick webkit-box-shadow: and box-shadow:
/// .form-control:focus { webkit-box-shadow: none; box-shadow: none; }

////// Change border color of Inputs focus ///////
.form-control:focus { border-color:} -> click on rectangle color icon -> pick a color! -> border-color:#2196f3 for example
/// .form-control:focus { border-color: #2196f3 }

41. Override focus style (remove shadow arount inputs and change border color) and put it after .form-control in Site.css

////////////// Adding a DropDownList to NavBar ///////////////////
/// Copy NavBar right DropDown pattern from bootstrp and paste it in _LoginPartial.cshtml inside form: class ="navbar-right"
42. Adding a DropDownList to NavBar

//// Change black background color of DropDownList in NavBar /////
/// R-Click on a DropDownList. in the right :  click on rectangle to pick color (color picker) -> go to navbar to choose desired color.
/// We can pick darker bg-color and then play with opacity to make it blend with a bg a little bit more!
/// copy the style and paste it in site.css beside other css for NavBar.

//// Dissapearing Shadow around DropDownList /////
/// Select <ul class="dropdown-menu"...</ul> : on the right untick webkit-box-shadow: and box-shadow
/// Add css .dropdown-menu {  } to Site.css

///// Change triangle on the right of DropDown gray -> white /////
/// R-Click on a little triangle. on the right > a .caret { border-top-color: #fff; border-bottom-color: #fff; }  => add css to Site.css
43. Change css of DropDownList: change bg-color, remove shadow and change triangle color

/// Rename 'Application name' to Gighub and remove Home in _Layout.cshtml

/// Make difference between 'Gighub' and 'Add a Gig'. make 'Gighub' stand out ////
/// Notice that Gighub is in the <a class=navbar-brand...
/// R-Click on a 'Gighub'. in the right : .navbar-brand {} add font-weight:700;
44. Change Application name to Gighub and make it bolder

///////////////////////////////////////////////// 10. Usability Best Practices /////////////////////////////////////////////////////////////
/// Some Key Principles of Usability :
/// Lables: Keep them short, Be consice, Dont use ambiguous words. Use Top Align in forms (or right align) 
/// Fields: Reduce the number, See if you can remove optional fields or separate them from mandatory fields.
/// If you have many fields, Group related fields tha logically make sense. if that is not sufficient, break the entire form into Wizard.
/// Specify the format for field such as Date, Time, Ip,... : Add watermark
/// Set the focus on the first field in the form: save the user from one extra click!

/////////// Tell the user all the fields are mandatory ////////////
/// One practise: put asterisc (*) or lable like required next to those required fields.
///// Add a lable on top of the form that tells all fields are required. /////
///<p class="alert alert-info"><strong>All Fields are required</strong></p>

///////// Put the Focus on the First Field of Form ////////////////
/// use autofocus in : @Html.TextBoxFor(m => m.Venue, new { @class = "form-control" , autofocus = "autofocus" })

////////// Add Watermark on the Date and Time Fields //////////////
/// Add placeholder to Date and Time: @Html.TextBoxFor(m => m.Date, new { @class = "form-control", placeholder = "eg 1 Jan 2019" })
45. Add 'All Fields are required' lable of top of form + Put focus on the first field + Add watermark to Date and Time fields.

/// Action: each form should have a primary action. It's bettter to avoud secondary action. Change 'Cancel' button bg-color to white or make it a link
/// Primary action should stand out. Align primary action with input fields. 

/////////////////////////////////////// Validation //////////////////////////////////////////////
/// Provide clear and concise validation messages for users. Use red to indicate errors and green to indicate successfull messages. 
/// Provide smart defaults: Detect location using Ip Address or Html5 Location Api to fill the location textbox.
/// Or calculate the value in some fields based on the value in other field, Go ahead and do that for users.

//////// Make Validation Messages Red ////////////////
/// R-Click on a validation error: in the right : click its parent: <span class="field-validation-error".. 
/// -> click on + icon : add color: red; font-weight: bold; -> copy css(span.field-vali...) and paste it in Site.css
/// because class="field-validation-error" is not bootstrap class and It's part of MVC,  we define it on top section of Site.css
/// For the border of Textbox to be red when validation error occur : .input-validation-error { border: 2px solid red; }
46. make validation error messages red and also the border of Textboxes include invalid value.


////////////////////////////////////////////// 11. Extending ASP.NET Identity Users//////////////////////////////////////////////////////////
/////// Fill Home page with the list of upcoming Gigs ///////////
/// Read from database all upcoming gigs and show it in /home/index
/// Be Careful: Not define _context readonly!
/// In Index Action of Home Controller, read all gigs from database using Include (for reading artist too). Send list to Index View.
47. Show all upcoming gigs (DateTime and ArtistUsername) at home page.

///////////////// Add Name property to Our User ////////////////
/// IdentityUser class does not have the Name property. We need to manually add it.
/// Open ApplicationUser.cs -> Add public string Name at the beginning and decorate it as [Required] and [StringLength(100)]
/// Add-Migration AddNameToApplicationUser : because we have extended our domain-model + Update-Database
/// In View display Name of the artist instead of UserName : @gig.Artist.Name + Build
48. Add Name prop to AspNetUser class + Add-Migration + Update-Database

///////// Modify Signup form to capture Artist's Name //////////
/// Open Register.cshtml. Copy one of div block and paste it at the beginnig of form.
/// Create Name prop in RegisterViewModel and decorate [Required] and [StringLength(100)]
/// AccountController -> Register Action -> Initialize Name in new ApplicationUser instance(user)

///////////// Cleanup AccountViewModel: Move Files//////////////
/// Separate RegisterViewModel with Alt + Enter -> put the cursor on the class name(RegisterViewModel) and activate Refactoring Commands(Ctrl+Shift+R)
/// Select second option(Move To Folder... select GighubV2\ViewModel) and Next
49.  Disjoin classes in AccountViewModel and move them into ViewModel folder


///////////////////////////////////// 12. Creating-Beautiful-and-Precise-Designs-with-CSS ///////////////////////////////////////////////////
/// List gigs in Home page in specific style
/// Zen Coding: comes with Web Essentials plugin
/// (div.date>div.month+div.day)+(div.details>span.artist+span.genre): put the cursor at the end of the line and press tab!
/// to display only Date: DateTime.ToString("d ") => put space after 'd'
/// Personal preference: use 'div' when want to create a layout and use 'span' when want to add style to some text
/// in HomeController: eager load Genre too. 
50. List gigs (Month/date Artist/Genre) in home page with ZenCoding. 

/// Relative and Absolute positioning in css:
/// An element with 'relative position' allow us to 'absolutely' position its children.
/// We want to move details to the right of date => set the position of 'details' to absolute and it's parent(<li>) to relative.
/// First we need to give <ul> (at the top of view) a class to be able to identify this element and it's children in css.
/// <ul class="gigs">
/// at the end of Site.css add new comment for new part: /* Page-Level Styles */
/// Site.css: .gigs > li : > means li that immediately below gigs element.
/// .gigs > li { position : relative;  margin-bottom: 30px; }
/// .gigs > li .details { position: absolute; top: 0; left: 100px; }
/// remove bullet points: .gigs { list-style: none; }
51. Move Artist/Genre to the right of Date/Time and remove list bullet point.

///////// Build a Calendar icon /////////
/// Put Browser and VS side by side: Open Browser => Win + -> => Open VS => Win + <-
/// Make bg-color of Date red and color of the text white and align text to center
/// if not set 'width', it set to 100% and it is bad!
/// Set width= 60px;
/// Make text of Date and Month Uppercase :  .gig > li .date .month { text-transform: uppercase; }
/// Make text of Date and Month a little smaller (16px;) and bold: font-size: 14px;  font-weight: bold;
/// add space between date and surrounding area : padding : 2px 6px;
/// ser bg-color of Day to gray and text color dark. Make font a little bigger: 20px; add more padding to day.
/// Make corners of a Date container round:		border-radius: 8px;
/// Make artist name bold and put the genre on the next line. .gigs > li .details .artist { font-weight: bold; display: block;}
/// Make Genre a little smaller
/// add space betwwen top of page and first item of list(first gig) : on the very top of Site.css set padding-top to 90px;
52. add css to day/month/artist/genre

///////////////////////////////////// 13. Implementing a Use Case from Top to Bottom ///////////////////////////////////////////////////
///////// Add a Gig to the Calendar //////////
/// We want to inplement a usecase "Add a Gig to the Calendar":
/// Dont rely too mush to the words and requirement documents!
/// When building Software, Do not attempt to model the universe!  Gig Calendar Month Day GoogleCal iCal ...
/// Pay attention to only create enought of the model to solve the problem at hand.
/// The Problem(we are trying to solve): Keeping track of the gigs the user might be attending.
/// Solution : simple association btw User and Gig => many to many relationship
/// We need 3rd table name Attendance but we add this manually: because we need to query that directry
/// Add Attendance.cs to project  ApplicstionUser Attendee, string AttendeeId, Gig Gid, int GigId
/// We need a composite primary key (AttendeeId, GigId) : decorate both with [Key]
/// Specify order for primary key : decorate both with [Column(Order = 1)], [Column(Order = 2)]
/// Go to adbc add add DataSet<>  -> Add-Migration AddAttendance -> Update-Database
/// Update-Database cause an error because both User and Gig have cascadedelete on Attendance.
/// Problem: We have multiple Cascade Paths
/// Solution: disable CascadeDelete in one of these relationship. 
/// Its better not to delete a Gig and just cancel it: allow user to undo the cancellation
/// So if we never delete a gig, it is Ok to disable CascadeDelete btw Gig and Attendance

//////// Disable CascadeDelete btw Gig and Attendance using FluentApi /////////
/// Create a Folder: EntityConfigurations/AttendanceConfiguration.cs define constructor define FluentApi:
/// Add Attendance relation with Gig : Many to One with WillCascadeOnDelete(false).
/// Pay attention because we dont have navigation prop in AspNetUsers table, we cannot name it in WithMany(nav-prop). So leave it empty.
/// Of course we can add nav-prop in ApplicationUser for Gig but we also can leave it empty.
/// Re-Generate Migration : -Force + Update-Database
53. Add Attendace.cs(many-to-many relation btw User & Gig) to represent 'add a Gig to Calendar' info. Remove CascadeDelete with Gig.

/////// Building the UI: Add Button at the right bottom of each Gig ////////
/// When user click on btn, bg-color of btn change from white to blue and also add corresponding gig to the calendar.
/// To implement this, we are gonna use AJAX because we dont want to a full page reload. So on the server we create a lightweight API.
/// Create /api/attendances with HTTPPOST (because POST is more common. We'll need to include some data in the request body : gigId, Not UserId!
/// the UserId (id of currently logged in user) should be calculated on the server. Because if we add userId to AJAX, it open the security holes!
/// Malicious user pass other user's Id to API using a loop. This is messing with the whole system!

/////// Building the API /////////
/// R-click on 'Controllers' -> Add Controller... -> Add Web API 2 controller-Empty -> name it: AttendancesController
/// Copy the last line of 'readme.txt' and put it in Global.asax(at the begining of Application_Start method) -> Save 
/// So in Attendances Controller we need to recieve an id from view, create a new attendance obj, add it to the context and save changes.
/// We need to use [Authorize] for this controller because we get user id in action of this controller.
/// Asp.net WebApi by default does not look for scalar parameter like an integer in the request body. It expects them to be in the URL
/// So we decorate int parameter to [FromBody] attribute to tell web api to receive it from the body of request
/// this is very basic implementation: Not checking duplicate, not error handling.
///
/// [HttpPost]
/// public IHttpActionResult Attend([FromBody] int gigId)
/// {
///		var attendance = new Attendance
///		{
///			GigId = gigId,
///			AttendeeId = User.Identity.GetUserId()
///		};
///		_context.Attendances.Add(attendance);
///		_context.SaveChanges();
///
///		return Ok();
/// }
///
/// Build + test with Postman(explained below)
/// Note: It is not necessary to put api in Api folder under Controllers in Solution Explorer, 
/// But it is necessary to bring /api/ before the name of api controller in the URL at the beginnig of the request. : http://localhost:14143/api/attendances

/////// Testing the Api with Postman ///////
/// The first Postman which is more popular in google have problem with authentication
/// Open Postman -> Copy address bar to 'Enter Request URL here' section. replace the address of api: /api/attendances/
/// Change GET to POST -> click 'raw' button : this is our request body 
/// Click Send -> See html respond : Authentication is not working => Authorize tag navigate us to login page(home/index)
/// ERROR: if not set [FromBody] for gigId in Api, get this error: "Message": "The requested resource does not support http method 'POST'."
/// ERROR: if not Login : status 200 OK but get HTML in the result which should not have happend! 
/// we can see: <title> Log in - ... in html because the authentication is not working and the api is redirecting me to the login page
/// ERROR : "Message": "The request entity's media type 'text/plain' is not supported for this resource.", => We missed the header 
/// SOLUTION: click Header(0) -> in Header: type Content-Type and in Value: application/json
/// When Post request in Api is working: The body of respont is empty and STATUS: 200 OK
/// ERROR: if click one more time(body is the same) => get error: in the middle of message: "Violation of PRIMARY KEY constraint"
/// So we need to modify our action to prevent duplicates

/////// Preventing Duplication in Api: dont reserve same gid for a user //////////
/// Having Attendance class in our model let us directly query that.
/// We have to check if attendance obj already exist for the current user and the given gig. 
/// var alrearyExist = _context.Attendances.Any(a => a.AttendeeId == currentUserId && a.GigId == gigId);
/// return a message instead of error: if (alrearyExist) { return BadRequest("The attendance already exists."); }. 
/// We can click again to see a message: STATUS: 400 Bad Request + { "Message": "The attendance already exists." }
54. Build an api for adding attendance + prevent duplication with providing error message and returning Bad Request(STATUS:400)

///////// Add a toggle Button (Going? white -> Going blue) in each Gig //////////////
/// in index.html -> details ->  Add a button after the 'Genre'. -> Refresh page. This button is a little big!
////// Decrease the size of Button /////////
/// use bootstrap class: "btn-sm" to smallize the button. It's not working! because of a mistake we made in earlier bootstrap overriding!
/// It's not working because we define .btn in Site.css after bootstrap classes. So it override all bootstrap classes!
/// Solution: temporalily comment out font-size and padding attribute in .btn in Site.css
/// Problem: Buttons are not align
/// Solution: use another bootstrap class: "pull-right" for button in index.cshtml
/// Problem: if Artist name is short, pull-right not work properly.
/// Solution: Define style="min-width: 150px;" for detail div. So in .gigs > li .details { min-width: 150px; }
55. Add a Button to each Gig and do css to align it

///////////// Wiring up the Button to the API ////////////////////
/// Write some JS at the bottom of index.cshtml
/// Remember: What we put here will be rendered AFTER all js libraries like jquery or bootstrap
/// We need an identifier for our button: Define a new class(a marker) for the buttton: use js-toggle-attendance to mark the button.
/// Make AJAX call for clicking btn: use jquery 'post' method.
/// AJAX post method: 1st argument: URL of api. 2nd arg: data we want to send in the request body which should be the 'gigId'

////// Where do we get gigId? /////////
/// We need to add it to the button as a data attribute : <button data-gig-id="@gig.Id" ...
/// To use it: Put 'e'(represent event) in the arg of click function for button. 
/// From event we could get the source of the event which is the button
/// use $(e.target) as the second parameter for post method of AJAX to 
/// $(e.target) : gives the source of event
/// e.target alone : return full html of button on the console
/// Test: $(button).click(function(e) { console.log(e.target) });						=> give me a whole <button> tag! in console
/// Test:								console.log($(e.target).attr("data-gig-id")		=> give the id of gig that we click!
/// AJAX post method with these two parameter, post to api and return a promise. So we can chain the done and fail methods to handle success and error senarios.
/// Chaining allows us to run multiple jQuery methods (on the same element) within a single statement.
/// Use .done chain method if the call of api is successfull and do operation within it.
/// if Api call is successfull: Change the lable and Background-Color of Button use chain method .removeClass("btn-default").addClass("btn-info").text("Going");
/// Not testing it yet!
56. Write JS at the end of index.cshtml and add AJAX call for /api/attendance. if success, change btn css else alert.

/// A MISTAKE: in AJAX call, Controller cannot bind recieved value to the gigId parameter: ASP.net expect the request from the body ([FromBody])
/// In order to bind these two value, we need to put AJAX parameter to 'object literal': {"key" : "value"}
/// change $.post("/api/attendances", button.attr("data-gig-id")) --> $.post("/api/attendances", { "" : button.attr("data-gig-id") })

////////// Cleaner way to bind data parameter in AJAX to gigId parameter in Api Controller HttpPost Action //////////
/// The reason for we having this problem is because we have a scalar parameter in AttendancesController: int gigId
/// if we put this in a complex type like an object, then we won't need [FromBody] anymore and in our JS, we can replace this "" with gigId as a Key.
/// in JS: replace empty string "" with 'gigId' : now it look likes { gigId: button.attr("data-gig-id") }
/// Create a new class to wrap this gigId parameter : class AttendanceDto
/// DTO(Data Transfer Object): an architectural pattern to send data across processes. In client side we have some piece of code and in server side we have some other pieces.
/// To communicate between these two pieces of code(2 Processes) use DTO
/// Create Class AttendanceDto.cs and put it in separate folder "Dtos".
/// Now in AttendanceController replace '[FromBody] int gigId' with AttendanceDto dto -> replace 2 gigId(local variable) with dto.GigId
/// Test the project => Something falied!
/// To find out what is wrong: Ctrl + Shift + i -> click red cross icon with 1 beside it ->  400 (Bad Request)
/// Reason: We already have an attendance for this gig for the current user.
/// For other gigs it works! Hurra
/// Ideally when we render a list of gigs, a 'Going' buttons should be in the state that provide user information: blue if user already registers attending to each gig. Do in the future.
57. Replace AJAX second param with key:value. Use DTO object to communicate between JS code(AJAX) and API. Now the button 'Going?' works.
/// Summary: Try to implement a usecase with the simple model to solve the problem at hand. nothing more! Do not attempt to model the universe!
/// At each steps, focus only one aspect of development => it has two advantages: 1. you will be more productive 2. you can write better code


///////////////////////////////////// 14.  ///////////////////////////////////////////////////
////////// Implement Follow an artist UseCase ////////////////
/// 1. Add a new class: Following.cs with 4 prop: FollowerId FolloweeId with their navigation prop.
/// 2. Modify ApplicationUser: Add two ICollection<Following> Followers and Followees properties. They should be initialized in constructor(because they both are collections)
/// Rule: When you add a property to a class and that property is a collection, you should always initialize it in the constructor. because that is the responsibility of that class
/// 3. Add public DbSet<Following> Followings { get; set; } to Adbc
/// 4. Add fluentApi for ApplicationUser:
///		public class ApplicationUserConfiguration : EntityTypeConfiguration<ApplicationUser>
///     {
///         public ApplicationUserConfiguration()
///         {
///             //// Relationship ////
///             HasMany(u => u.Followers)
///                 .WithRequired(f => f.Followee)
///                 .WillCascadeOnDelete(false);
/// 
///             HasMany(f => f.Followees)
///                 .WithRequired(u => u.Follower)
///                 .WillCascadeOnDelete(false);
///         }
///     }
///
/// 5. Add modelBuilder.Configurations.Add(new ApplicationUserConfiguration()); to onModelCreating in Adbc
/// 6. Add-Migration AddFollowing
/// 7. Add an Api : FollowingsController with an action Follow(FollowingDto dto)
/// 8. Add FollowingDto.cs with prop: string ArtistId
/// 9. Change Index.cshtml: in front of each Artist name, add a button btn-link. Add JS for button link with AJAX(similar to attendance)
58. Implement Follow an artist(9 steps)

////////////////////// Hiding Actions(Follow and Going) from Anonymous Users /////////////////////////
/// How we can find out if the user is authenticated or not? => That is the job of Controller to pass this infornation to the view.
/// Solution: Change the model of view from an IEnumerable<Gig> to a ViewModel that has two properties:  
///  var viewModel = new HomeViewModel
///  {
///      UpcomingGigs = upcomingGigs,
///      ShowAction = User.Identity.IsAuthenticated
///  };
///
/// There are 3 red name in the code below, So with Alt + Enter we create a class
/// Change the type IQueryable to IEnumerable : because when we pass vm to the view, we want to iterate over it. We dont want to extend the query
/// Move this viewmodel to ViewModels folder
/// Send vm instead of upcomingGigs to View: return View(viewModel)
/// in Index.cshtml: change the model behind this view from IEnumerable<GighubV2.Models.Gig> to GighubV2.ViewModels.HomeViewModel
/// in Index.cshtml: change Model to Model.upcomingGigs
/// use if block to display buttons: @if (Model.ShowActions) {button html line}
/// Ctrl + Shift + B to build, text, beautiful!
59. Hiding Actions(Follow and Going) from Anonymous Users

////////// Implement View Gigs I'm Attending UseCase ////////////////
/// Currently, there is no way to verify the gigs added to the calendar. 
/// So we need to implement View Gigs I'm Attending UseCase as a secondary or supporting usecase.
/// Create new action 'Attending' in GigsController which will return a view that will render a list of gigs the user will be attending.
/// Decorate this action with [Authorize] attribute because this should be accessible only by authenticated users.
/// Then we need the list of gigs the current user is going to attend. (in Attendances table)
/// var currentUserId = User.Identity.GetUserId();
/// var gigs = _context.Attendances.Where(a => a.AttendeeId == currentUserId);
/// the code above give us the list of attendances. But what we need is the list of gigs.
/// So we extend the code by .Select :
/// var gigs = _context.Attendances.Where(a => a.AttendeeId == currentUserId).Select(a => a.Gig).ToList() and put it in View: return View(gigs);
/// Manually go to Views->Gigs->Add View...->name it Attending
/// We want this view to show the list of gigs like we have in the Home Page. So we go to index.cshtml. We have 2 choices:
/// 1. Copy the markup from index.cshtml to new view 2. Extract this to the partial view so we can reuse it both places.
/// For now, we go with the copy approach because we dont want to focus on sth else and get distracted by refactoring by moving things around!
/// Lets build this page, make it work and then we'll do refactoring.
/// Select entire <ul> and paste it in attending view.
/// the model should be HomeViewModel: It is a little odd because we are in attending view but we are refrencing HomeViewModel. So it is better to
/// rename this HomeViewModel to GigsViewModel that we can reuse on both these views
/// The last step is to put a link to this action in our navigation bar:
/// Go to _LoginPartial.cshtml and put @Url.Action("Attending", "Gigs") in the href : <li><a href="@Url.Action("Attending", "Gigs")">Gigs I'm Going</a></li>
/// Build + Clear Attendances table for test --> Test -> We get an error because we have to return a viewModel instead of a list of gigs to Attending View.
///  var viewModel = new GigsViewModel()
///  {
///      UpcomingGigs = gigs,
///      ShowAction = User.Identity.IsAuthenticated
///  };
///
/// return View(viewModel)
///
/// Test again. List is empty -> Add a Gig -> Click on View Gigs I'm Attending -> Get another error: @gig.Artist.Name because we have'nt eager loaded Artist.
/// Solution: in GigsController: After .Select(a => a.Gigs) we should include Artist and Genre because we are going to display both these attributes
/// .Include(g => g.Artist)
/// .Include(g => g.Genre)
60. Implement View Gigs I'm Attending UseCase

/////// Refactoring: Applying the DRY Principle ///////////////
/// Currently we have 2 Views that look exactrly the same: index.cshtml and attending.cshtml
/// Views/Gigs/Attending.cshtml and Views/Home/index.cshtml
/// We want a view that can be referenced by both GigsController and HomeController. This view needs to be in a Shared folder.
/// Drag Index.cshtml into Shared folder and rename it to Gigs.cshtml because it renders a list of gigs
/// Look at the model behind this view: GigsViewModel => Note the consistency in the code. We have a view called Gigs and a viewmodel called GigsViewModel
/// Delete Attending view because we dont need it anymore.
/// We just need to modify our controllers to use this view
/// Go to HomeController -> insert "Gigs" in : return View("Gigs", viewModel);
/// Go to GigsController -> insert "Gigs" in : return View("Gigs", viewModel);
/// Test-> works fine but we lost the heading but this is pretty easy to fix
/// Add public string Heading { get; set; } in GigsViewModel
/// in Gigs.cshtml add <h1>@Model.Heading</h1> on top of page
/// Set the Heading in Controllers: GigsController -> Heading = "Gigs I'm attending"   HomeController -> Heading = "Upcoming Gigs" + Build
61. Combine 2 similar views(index.cshtml and attending.cshtml) into one (Gigs.cshtml).

/////// Add Vertical Space Between the Heading and The ListOfGigs //////////
/// We can easily do so with css. We have 2 options here:
/// 1. Define a style for our H1 heading and add margin-bottom there:   h1 { margin-bottom: 20px; } Problem: maybe on other page we want the text below h1 close to it
/// 2. Add margin-top to our list of gigs : .gigs { margin-top: 20px; }		Problem: maybe on other pages we dont want margin on top of list
/// 3rd way is cleaner more reliable more usable:
/// Go to Site.css: before bootstrap overrdies add these classes:
/// .voffset { margin-top: 2px; }
/// .voffset1 { margin-top: 5px; }
/// .voffset2 { margin-top: 10px; }
/// .voffset3 { margin-top: 20px; }
/// .voffset4 { margin-top: 40px; }
/// .voffset5 { margin-top: 80px; }
/// Go to Gigs.cshtml-> in ul tag add one of the above class and test it until get the desired result:  <ul class="gigs voffset3">
62. Add Vertical Space Between the Heading and The ListOfGigs.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////// 							//////////////////////////////////////////////
/////////////////////////////////////////////////////  Part 2. Advanced Topics  //////////////////////////////////////////////
/////////////////////////////////////////////////////							//////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////// 1. Basic CRUD: Implementing the Read ///////////////////////////////////////////////////
////////// Implement My Upcoming Gigs (as an Artist) ////////////////
/// First we need an Action: In Gig Controller, create an action: Mine 
/// Decorate this action with [Authorize]: Only authenticated artist can access this to view his/her upcoming gigs.
	public ActionResult Mine()
	{
		var currentUserId = User.Identity.GetUserId();
		var gigs = _context.Gigs
			.Where(g => g.ArtistId == currentUserId && g.DateTime > DateTime.Now)
			.ToList();
		return View(gigs);
	}

/// We want only future gigs so we add condition for it and also end query with ToList() to immediately execute the query.
/// We want to display the in the format similar to the Gigs.cshtml.
/// Go to Gigs.cshtml: We have 2 choices: 1. copy markup or reuse it. which one is Better? 
/// Reusing is not always a good thing. It is better to copy because we have ShowAction to display button and not need it.
/// Also we need another actions in this view : ( Edit | Delete ) So we are gonna have more conditional state here.
/// We cannot reuse it because it will going to be too noisy. also we have some unwanted JQuery code at the bottom of it.
/// These existing JS code does not apply to our future Edit | Delete actions so they are useless
/// We dont want to make this view Jack of all trades! 
/// 1. Just select the <ul> from Gigs.cshtml -> copy it
/// 2. Create new view for Mine() action -> name it Mine.cshtml ->  Delete ShowAction code block -> 
/// No need to display name. The artist want to know what he/she is playing, where and when.  1. What  2. Where  3. When
/// 3. Replace 'Venue' instead of 'Name' of artist.
/// If we decided to reuse that view, we had to use conditional statement that pollute the ViewModel and View all together.
/// 4. No need to pass ViewModel to this view. Just pass IEnumerable<Gid> : Delete .upcomingGigs from Model.
/// 5. Eager Load Genre: for display Genre.Name
/// 6. Add a link in Navigation bar: _LoginPartial -> Duplicate an <li>
/// 7. Edit like this: <li><a href="@Url.Action("Mine", "Gigs")">My Upcoming Gigs</a></li>
63. Implement My Upcoming Gigs (for an Artist)

/// Minor issue: We need to rename heading for this page. Mine.cshtml -> <h2>My Upcoming Gigs</h2>
/////// Redirect the artist to this page after he/she add a new Gig ///////
/// Go to GigController -> Find Create action with Ctrl+F12 -> 
/// replace return RedirectToAction("Index", "Home"); with return RedirectToAction("Mine", "Gigs");
64. Rename Heading + Redirect the artist to this page after he/she add a new Gig.

///////////////////////////////////// 2. Basic CRUD: Implementing the Update ///////////////////////////////////////////////////
//////////////// Refactoring out existing form for adding a Gig and reusing for Updating existing Gig //////////////////////////
///////// Displaying Actions on Hover ////////////
/// We want to hide Edit|Delete for a gig in MyUpcomingGigs page(for artist) and when the user hover on them, they show up
/////// Create Edit | Delete Links below genre name ////////
/// in Mine.cshtml -> under <span class="genre"> -> type zen coding: div.action Tab => <div class="action"><div>
/// Hit enter btw div -> a[href="#"] Tab => <a href="#"></a> : btw type 'Edit' -> Refresh browser to see the result for now
/// We want to use css to show this only when the user hovers their mouse over this gig.
/// in the end of Site.css: 
	.gigs > li .action {
		font-size: 15px;
		display: none;
	}

	.gigs > li:hover .action{
		display: block;
	}
//// no need for any JS or JQuery code!
65. Displaying Actions(Edit) on Hover

///////////// Populating a Form ////////////////
/// Now we have Edit link. We want to redirect the user (after click to link) to the page that he can edit the gig.
/// 1. First we need an action(very similar to Create action). 
/// Go to GigController -> Ctrl+F12 -> type Create -> select all(Ctrl+w) -> Ctrl+d to duplicate. -> rename it to Edit
/// Define a parameter for id of the gig:(int id) 
/// We do not have to permit anyone can edit any gig. Only the user that create his own gig should be permitted to edit that.
/// The code var gig = _context.Gigs.Single(g => g.Id == id); have a security hole. because anyone can pass a gig id to edit.
/// So we need a second condition: && g.ArtistId == currentUserId
/// Next we need to initialize viewModel
/// We can reuse the view Create to pass viewModel. So Create name for this view is not a good name anymore. We will change it.
/// Final Step: Change the Edit link in Mine.cshtml: <a href="@Url.Action("Edit", "Gigs", new { id = gig.Id })">Edit</a>
	[Authorize]
	public ActionResult Edit(int id)
	{
		var currentUserId = User.Identity.GetUserId();
		var gig = _context.Gigs.Single(g => g.Id == id && g.ArtistId == currentUserId);

		var viewModel = new GigFormViewModel()
		{
			Venue = gig.Venue,
			Date = gig.DateTime.ToString("d MMM yyyy"),
			Time = gig.DateTime.ToString("HH:mm"),
			Genre = gig.GenreId,
			Genres = _context.Genres.ToList()
		};

		return View("Create", viewModel);
	}
/// Everything is fine, just 2 problem: Heading must be 'Edit a Gig' and Genre not show because of css overriding.

//////// Fix the issue with DropDownList: seems to be empty and not showing selected item //////////
/// R-click on DropDownList -> inspect -> if disable padding, the problem solve
/// So disable padding for form Control and set height:44px; -> Site.css: .form-control {} -> replace padding with height:44px
/// My way: Only disable padding for DropDownList select control 
			select.form-control {
				padding: 0 15px;
				height: 40px;
			}

/// Make Save Button a little Bigger /////
/// R-click on Save Button -> inspect -> click .cls -> type btn-lg -> see the result for yourself
/// Go to Create view -> add class btn-lg to Save button

//////// Refactoring: rename Create view to GigForm //////////
/// Go to Solution Explorer -> Views -> Gigs -> F2 on Create.cshtml -> rename it to GigForm
/// Now we need to modify our actions -> Modify "Create" to "GigForm" in Edit and Create actions : 
	return View("GigForm", viewModel);

////// Problem of Heading /////////
/// Add public string Heading { get; set; } in GigformViewModel
/// in GigForm.cshtml add <h1>@Model.Heading</h1> on top of page
/// Set the Heading in GigsController -> Create action: Heading = "Create a Gig" Edit action: Heading = "Edit a Gig" + Build

////// Problem of the Title of the Tab(page) /////////
/// in GigForm.cshtml -> ViewBag.Title = Model.Heading;

//////////// Updating Data: Implement the Update operation //////////////////
/// We are gonna create a new action call Update for this task.
/// in GigForm.cshtml we have Html.BeginForm("Create"...) but if we editing a gig we want a different action to be called: Update
/// So we want this to be dynamic. Use the same technique we used to render the heading for the page
/// replace @using (Html.BeginForm("Create", "Gigs")) 
///    with @using (Html.BeginForm(@Model.Action, "Gigs"))
/// Alt+Enter on Action to create this prop in GigFormViewModel 
/// in 'get' method of this new prop => if this is the new Gig then we return "Create" else return "Edit"
/// How do we know if it is a new Gig on not => We need another prop here called id.
/// in GigformViewModel:
	public int Id { get; set; }
        .
		.
		.
	public string Action 
	{
		get { return (Id != 0) ? "Update" : "Create"; }
	}
/// but we have magic string here: if in the future we rename our action, this code is gonna break. We fix that later during refactoring.
/// Now we have Id prop that should be render in for as a hidden field, So when we post a form, we know which gig we are modifying.
/// in Gigform.cshtml -> After AntiForgeryToken -> put: @Html.HiddenFor(m => m.Id)  : we can put it anywhere
/// Now we need to Create the Update action

///////////// Create Update Action ////////////////
/// The Update action is very similar to Create action.
/// GigController -> Ctrl+F12 -> type Create -> select second one -> select all(Ctrl+w) -> Ctrl+d to duplicate. -> rename it to Update
/// replace "Create" with "Gigform" in both actions
/// if ModelState is valid => instead of creating a gig and add it to our DbSet, we are gonna pull out the existing gig and modify its prop:
	[Authorize]
	[HttpPost]
	[ValidateAntiForgeryToken]
	public ActionResult Update(GigFormViewModel viewModel)
	{
		if (!ModelState.IsValid)
		{
			viewModel.Genres = _context.Genres.ToList();
			return View("GigForm", viewModel);
		}

		var currentUserId = User.Identity.GetUserId();
		var gig = _context.Gigs.Single(g => g.Id == viewModel.Id && g.ArtistId == currentUserId);
		gig.Venue = viewModel.Venue;
		gig.DateTime = viewModel.GetDateTime();
		gig.GenreId = viewModel.Genre;

		_context.SaveChanges();

		return RedirectToAction("Mine", "Gigs");
	}
 /// Compare it to Create action to see the differences for yourself.
66. Complete Update a gig for an artist.

///////// Testing the Update ////////////
/// We edit a gig and click Save. but we have a big Problem: We have 2 gigs instead! It was not updated.
/// Reason: Our action was not selected properly. Instead of Update action being called, Create action was called.
/// Source of problem: because in Action prop of GigformViewModel, Id is set to 0 and that is why Create action called
	public string Action 
	{
		get { return (Id != 0) ? "Update" : "Create"; }
	}
/// Because we forgot to initialize the Id prop 
/// In Edit action, when we initialize the viewModel, we didn't set the Id property. So by default it is zero => target action always is Create
/// Solution: GigsController -> Edit action : viewModel initialize : add Id = gig.Id
67. Solving the problem of duplicating a gig instead of updating.

////////////// Using Expressions to Replace Magic Strings ////////////////////
/// We have magic string here: 
public string Action 
	{
		get { return (Id != 0) ? "Update" : "Create"; }
	}
/// Magic Strings are very fragile.
/// if in the future we rename our actions above("Update" or "Create"), this code is gonna break. We fix that later during refactoring.
/// instead we are gonna replace them with Lambda Expressions
/// So we wanna have an expression that represent the update method
/// with the Lambda Expressions: if I rename the Update or Create methoods, my Lambda Expression will get updated automatically
/// Step by Step:
public string Action 
	{
		get 
		{
			var update = (c => c.Update());
		}
	}
/// 'c => c.Update()' is an anonymous method, so we can use Func Delegate to represent that. => change var to Func<GigsController>
/// what does this method(c => c.Update()) represent? When we call c.Update() or the Update action, we will get the ActionResult
/// So we put an ActionResult as the second parameter of Func => Func<GigsController, ActionResult> update = (c => c.Update())
/// Just a tiny problem: the Update action expects a viewmodel, so give 'this' => Func<GigsController, ActionResult> update = (c => c.Update(this))
/// So to Review: 
/// This Lambda Expression [ c => c.Update() ] represent a method that takes c as an argument and returns an ActionResult
/// in C# we can use Func<> which is a Delegate to represent that.
/// So the first argument is the input to that anonymous method which in this case is GigsController
/// And the second argument is the return type. In this case: ActionResult.

/// Func<> which is a Delegate allows us to call this anonymous method but we dont wanna call this!
/// We just wanna represent it as an expression. So we are gonna change the type to 'Expression':
		Expression<Func<GigsController, ActionResult>> update = (c => c.Update(this));

/// So we have the expression that represent the Update action(method) in the GigsController
/// We do something similar with the Create action:
		Expression<Func<GigsController, ActionResult>> create = (c => c.Create(this));

/// Depending the value of the Id, we are gonna select one of this expressions and from there, we will get the method name at runtime:
		var action = (Id != 0) ? update : create;      
/// this means that if Id is not zero, select update expression else select create expression
/// So action variable here is also an expression. So with this expressions, we will extract the method name at runtime:
		
		var actionName = (action.Body as MethodCallExpression).Method.Name;

        return actionName;

/// in the code above: first we get action.Body: we need to cast this to MethodCallExpression because this expression represent 
/// a method call like Create or Update
/// Now from a MethodCallExpression we can access to the method property and then Name and finally return actionName instead of 
/// hardcoding Create and Update

/// Final look of Action property is like below:
	
	public string Action 
	{
		get
		{
			Expression<Func<GigsController, ActionResult>> update = (c => c.Update(this));
			
			Expression<Func<GigsController, ActionResult>> create = (c => c.Create(this));

			var action = (Id != 0) ? update : create;

			var actionName = (action.Body as MethodCallExpression).Method.Name;

			return actionName;
		}
	}

/// Summary of Update Operation Module :
/// Implementing th Update was reasonably simple because it was very similar to the Add operation.
/// Notice that earlier in Add we did all the hard work there: 
/// Create Form, Building the domain-model, Upgrading the database, Implementing validation, security and usability.
/// Suggestion: Focus on the Core UseCases first! instead of implementing a full CRUD functionality as one slice
68. Using Expressions to Replace Magic Strings and complete Update operation.



///////////////////////////////////// 3. Basic CRUD: Implementing the Delete ///////////////////////////////////////////////////
/// We implement logical delete. We dont physically delete a record. We just flag them as deleted.
/// For 2 reasons: 1. Prevent multiple cascade path problem 2. Potentially give the user the ability to undo things.

////////// Extending the Domain //////////////
/// Go to Gig.cs -> add bool IsCanceled prop -> Add-Migration AddIsCancelledToGig -> Update-Database
/// Pay attention to choose a word: because in reality the artist does not delete a gig. They cancel a gig.
/// So always think about the language of the domain you are working on.
/// We dont delete things, we cancel them, reject them, decline them, return them
69. add bool IsCanceled prop to Gig.cs

//////////// Building an API /////////////////
/// We're gonna use a mechanism similar to what we dit when Implementing follow an artist or attend a Gig
/// Put a link next to Edit link an call it Cancel. When user click it, we're gonna use AJAX to call the server.
/// Use AJAX: because we don't want to do a full page reload
/// So first we need an API:
/// Solution Explorer -> Controllers -> Create new folder name Api -> R-click -> Add -> Web Api 2 Controller -> name it GigsController
/// Decorate GigsController wit [Authorize] because only authenticated artists can cancel their gigs.
/// Create an action:  public IHttpActionResult Cancel(int id) : Notice that the parameter is integer not dto (for now)
/// Make sure to decorate it with [HttpDelete] 
		[HttpDelete]
        public IHttpActionResult CancelGig(int id)
        {
            var currentUserId = User.Identity.GetUserId();
            var gig = _context.Gigs.Single(g => g.Id == id && g.ArtistId == currentUserId);
            gig.IsCanceled = true;
            _context.SaveChanges();

            return Ok();
        }

////////////// Consuming the API using jQuery AJAX ////////////////
/// Go to Mine.cshtml -> after Edit link -  | a[href="#"] ->  <a class="js-cancel-gig" data-gig-id="@gig.Id" href="#">Cancel</a>
/// At the bottom of Mine.cshtml:
@section scripts
{
    <script>
        $(document).ready(function () {
                $(".js-cancel-gig").click(function(e) {
                    var link = $(e.target);
                    console.log(link.attr("data-gig-id"));

                    if (confirm("Are you sure you want to delete this gig?")) {
                        $.ajax({
                            url: "/api/gigs/" + link.attr("data-gig-id"),
                            method: "DELETE"
                            })
                            .done(function () {
                                link.parents("li").fadeOut(function() {
                                    $(this).remove();											: 'this' now is the <li>
                                });
                                console.log("gig canceled and removed from the list");
                            })
                            .fail(function () {
                                console.log("something failed");
                            });
                    }
                });
        });

    </script>
}

/////////// Using BootBox Dialog ////////////
/// Confirm box is very boring
/// Go to bootboxjs.com -> Download -> copy bootbox.min.js into /Scripts folder -> R-Click on Scripts -> Add Existing item... ...
/// Next we need to add this script to our bundle -> BundleConfig.cs -> near bootstrap.js: "~/Scripts/bootbox.min.js",
/// In Mine.cshtml -> paste the piece of code from examples in bootboxjs.com and add:
	bootbox.confirm("Are you sure you want to delete this gig?", function (result) {
		if(result) {		
			/// paste all ajax code here
		}	
	});
/// Now we can delete if(confirm).. block
/// Note: It is important to check the result with if block because if we not use if block, all the code will be executed wheather 
/// we click Cancel or OK.

///////////// Improving the Usability of Dialogs ///////////////
/// Problem: Message ask "Are you sure you want to delete this gig? and we have Cancel button here!
/// Another problem: Color of Primary Button: It should be red to get warning to the user, because the operation is dangerous
/// We need to use the dialog method to be able to customize the lable and color of the buttons.

////// Excluding logically deleted object from Queries /////////
/// GigsController(MVC Controller) -> Mine action -> add condition: && !g.IsCanceled
/// Do similar change for HomeController -> add condition::  .Where(gg =>  !gg.IsCanceled);
/// Alternatively we could still show them here but display the 'Canceled' flag and perhaps give the user the ability to undo that.

///////// Using Bootstrap Lables //////////
/// When click on the link "Gigs I'm Going" it show a list of gigs that the login users attending in their calendar.
/// Question: What should happen if artists cancel one or more of these gigs in this page? Should they disappear from this page?
/// Answer: No. It is not the good thing in term of usability. It's better to show the canceled gigs here and highlight to 
/// the user that they are canceled.
///// Add a Bootstrap Lable next to Canceled Gigs //////
/// Go to GigsController(MVC) -> Attending action -> in this action we're using the Gigs view. 
/// Modify this view (Gigs) and add a lable next to canceled gigs.
/// Go to Gigs.cshtml -> under @gig.Artist.Name -> add the code below:
		@if (gig.IsCanceled)
		{
			<span class="label label-warning">Canceled</span>
		}
/// Also it is better to hide "Going" button because it does'nt make sense anymore.
/// Add a condition: && !gig.IsCanceled in the block code below:
		@if (Model.ShowActions && !gig.IsCanceled)
		{
			<button data-gig-id="@gig.Id" class="btn btn-default btn-sm pull-right js-toggle-attendance">Going ?</button>
		}

/////////// Handling Edge Cases ///////////////
/// the Cancel method in our API should behave like it really delete a gig from database. 
/// This means that if the user click Cancel button for the second time, it should return an error telling that no resource
/// with the given id exist.
/// Go to GigsController(Api) -> put the code below:
		if (gig.IsCanceled)
            return NotFound();

/////// Move API Controllers to Api folder /////////
/// Open the Controller -> on the name of it -> Ctrl+SHIFT+R -> Move to Folder

/// Summary /////
/// Good thing about logical delete: Allow you to Report on Historical data and Undo things.
/// In your app, consider logical delete when it make sanse
/// Logical delete is good but not for every scenario. There are times that you should physically delete the record from the database.



///////////////////////////////////// 4. Avoiding Pitfalls in Domain Models ///////////////////////////////////////////////////
/// One of the challenges of software development is the constant changes in the requirements 
/// That is not in the original requirements document
/// they told us WHEN A GIG IS UPDATED OR CANCELLED, WE NEED TO NOTIFY THOSE USERS WHO ARE GOING TO THAT GIG.

/// you should always start with a domain model.
/// start by examining the requirements in detail
/// the user should be notified when a gig is cancelled or its details such as the date, time or the venue, are changed
/// also nofity the followers of the artists about their new upcoming gigs

/// think of a domain model for fulfilling this use case
/// Sketch a class diagram on a piece of paper

//////////// First Attempt: A Simple Design ////////////////////////
/// we have a Notification class that has three attributes(DateTime, Message, IsRead) Many-to-One with Gig and User classes

				Notification.cs
				-------------
				DateTime	- * ------> 1 Gig.cs
				Message		-
				IsRead		- * ------> 1 User.cs
				-------------
				
/// we can generate a message and store it in the message property.
/// Problem: What if you want to add a link below the artist name that would take the user to the artist's profile?   ArtistId is not available
/// Bad thinking: message is a string, so we can store HTML there and persist it in the database
/// Problem of this: if in the future we decide to change our URLs or the language of our notifications, we'll have to 
/// modify the data in our database. And parsing and processing strings in database is often hard and time consuming.

/// Experiment: in a legacy design, during one of the upgrades because one of the URLs had to be changed, It took nearly 7 hours!!

/// Do not have string message in your model
/// Store data about what has happened in a structured format

/// Problem of First Attempt Design: In update we need both the previous DateTime and new DateTime and it's possible 
/// that the artist may change the venue, so we may need two more properties


//////////// Second Attempt: Using Inheritance ////////////////////////
/// make this notification class abstract and only include properties that are shared across all notifications and then we can 
/// derive sub-classes like gig updated notification, gig canceled notification and so on
/// This is misusing inheritance
/// YOU SHOULD NOT USE INHERITANCE FOR REUSING PROPERTIES!
/// Inheritance should be used for inheritant behavior and logic
/// inheritance increases the complexity and coupling in your design 
/// our notification class is a simple data structure and It has no behavior 

//////////// Third Attempt: Collapsing the Hierarchy ////////////////////////
/// push the properties of gig updated notification into its base class:

				Notification.cs						NotificationType
				--------------------				-----------------
				DateTime							GigUpdated
													GigCanceled
				IsRead: bool						GigCreated
													-----------------
				OriginalDateTime		
				
				OriginalVenue
				--------------------
/// OriginalDateTime & OriginalVenue are nullable so if a gig is updated, we'll set them
/// but what if in the future we going to have many other different notification types
/// and each of them will need their own attributes?   
/// => this notification class is going to be bloated with too many attributes
/// Immediate Response: what if that will not happen?
/// shall we go ahead and design a model that will fulfill all these scenarios?  NO!
/// DO ENOUGH DESIGN TO SOLVE TODAY'S PROBLEMS IN AN OUTSTANDING WAY


//////////// An Alternative Design ////////////////////////
				Notification.cs		    1 ------------- *	NotificationAttribute.cs				
				---------------------						------------------------
				DateTime									Name
				IsRead: bool								Value
				OriginalDateTime							------------------------
				OriginalVenue
				---------------------
/// if we're going to support different notifications, we can take out this
/// OriginalDateTime & OriginalVenue props here and capture attributes in a generic way.
/// we can add a class here called notification attribute that has two properties: Name & Value
/// here we're using composition instead of inheritance 
/// with this model, we can capture any notification with any number of attributes with only 2 classes.
/// But again for now it will add extra complexity without providing any value
/// So we're going to stick to our current design and keep things simple.


//////////// Fourth Attempt: Using an Association Class ////////////////////////

		Gig.cs  1 --------------- *		Notification.cs		    		* ------------------ *				User.cs				
										---------------------			   UserNotification					--------
										DateTime						   ------------------		
	NotificationType 1 ---------- *		OriginalDateTime				   IsRead : bool	  
										OriginalVenue					   ------------------											
										---------------------				

/// if a gig is cancelled and we have a thousand people attending that gig, we'll have to create a thousand 
/// notification records in the database with all these properties. So with this duplication, we're going to waste some disk space.
/// So change the association between Notification and User from Many-to-One to Many-to-Many


/////////////////////////// Implementing Domain Classes  /////////////////////////////////
/// In the above model , we already have the user and gig classes. 
/// So we need to add three new types: NotificationType, Notification & UserNotification
/// 1. We start with NotificationType because that's the simplest; it's simply an enumeration and has no dependency on any other types.
/// 2. we'll Implement Notification 
/// 3.finally we'll implement UserNotification
 
/// Create new class: R-Click on Models -> create NotificationType.cs -> change class to enum -> give each of these members an explicit value
/// Because these values are going to be stored in the database and if in the future I add another member to this enum, I want to make sure 
/// the value of existing members are not changed.
namespace GighubV2.Models
{
    public enum NotificationType
    {
        GigCanceled = 1,
        GigUpdated = 2,
        GigCreated = 3
    }
	public class Notification
    {
        public int Id { get; set; }
        public DateTime DateTime { get; set; }
        public NotificationType Type { get; set; }
        public DateTime? OriginalDateTime { get; set; }
        public string OriginalValue { get; set; }
		
		[required]
        public Gig Gig { get; set; }
    }
/// Note that original date time is a nullable date time
/// Each notification is for one, and only one gig
	public class UserNotification
    {
        public ApplicationUser User { get; set; }

        [Key]
        [Column(Order = 1)]
        public string UserId { get; set; }

        public Notification Notification { get; set; }
         
        [Key]
        [Column(Order = 2)]
        public int NotificationId { get; set; }

        public bool IsRead { get; set; }
    }
////////////////////// Migration the Database ///////////////////////
/// We need to add two <DbSet> to our DB context
/// Go to ApplicationDbContext and add:
		public DbSet<Notification> Notifications { get; set; }
        public DbSet<UserNotification> UserNotifications { get; set; }
/// Add-Migration
/// Note that CascadeDelete for UserId is True. In SQLServer we can check that in this way:
/// R-click on UserNotification table -> Design -> R-click on UserId -> Relationship... -> expand INSERT And UPDATE Specific -> Delete Rule: Cascade
/// Set CascadeDelete to False between User and UserNotification
/// Create:
	public class UserNotificationConfiguration : EntityTypeConfiguration<UserNotification>
    {
        public UserNotificationConfiguration()
        {
            HasRequired(un => un.User)
                .WithMany()
                .HasForeignKey(un => un.UserId)
                .WillCascadeOnDelete(false);
        }
    }

//// Set this line below in Adbc:
    modelBuilder.Configurations.Add(new UserNotificationConfiguration());
/// Add-Migration SetCascadeDeleteFalseForUserNotification
/// Check in SQLServer: Delete Rule: No Action
70. Implementing Domain Class Of Notification.

////////////////// Storing Notification /////////////////////
/// Now when a gig is cancelled, I want to send a notification to all users that are going to attend that gig
/// GigsController(Api) -> Cancel action -> When the gid is canceled, we want to send a notification.
/// First lets create a notification(After gig.IsCanceled = True;):
		var notification = new Notification
		{
			DateTime = DateTime.Now,
			Gig = gig,
			Type = NotificationType.GigCanceled
		};
/// Next, we need to get all users that are going to attend this gig.
		var attendees = _context.Attendances.Where(a => a.GigId == gig.Id)

/// This query returns attendance objects, but what I want is a list of application user objects.
/// So from the attendance, we need to select its application user:
			var attendees = _context.Attendances
                .Where(a => a.GigId == gig.Id)
                .Select(a => a.Attendee)
                .ToList();

/// Now for each attendee we need to create a user notification object:
			foreach (var attendee in attendees)
            {
                var userNotification = new UserNotification
                {
                    User = attendee,
                    Notification = notification
                };
				_context.UserNotifications.Add(userNotification);
            }
/// And the last step is to add this object to our context. So entity framework tracks this as a new object and 
/// adds it to the database with this command: _context.UserNotifications.Add(userNotification);

/// Summary: 
/// Use UML diagrams purely as a temporary communication tool for understanding the problem and the solution
/// Not spend too much time creating class diagrams for documentation.
/// It is the complete waste of time to create all sorts of UML diagrams before coding, to keep my diagrams in sync with the source code.
/// The ultimate documentation is your source code.
/// Source code should be so clean and self-explanatory
/// It is best to avoid Inheritance and use composition. Because inheritance increases coupling in your application.
/// At this point we have a simple and, honestly ugly implementation for sending notifications!
/// When a gig is canceled, our cancel action is way too long.
/// In the next module, we're going to do step-by-step refactoring and move towards a more object-oriented design
/// You will see the cancel action being much shorter and much cleaner.


///////////////////////////////////// 5. Refactoring Towards an Object Oriented Design /////////////////////////////////////////////////
/// Common Issue in many MVC Projects: Anaemic Domain Model : a domain model with no behavior no methods no logic. Just a bunch of prop banks.
/// As your application grows, the logic around the domain model will end up somewhere else : mostly in controllers or services.
/// This makes your controllers or services FAT, unmaintainable, and hard to unit test.
/// So we'll refactor GigsController Api by extracting the domain logic and pushing it into our domain model
/// which will result in a behavior-rich domain model, better separation of concerns and improve maintainability and testability.

/// Go to GigsController Api:
/// The first thing we want to refactor is the foreach block here:
			foreach (var attendee in attendees)
            {
                var userNotification = new UserNotification
                {
                    User = attendee,
                    Notification = notification
                };
				_context.UserNotifications.Add(userNotification);
            }
/// Instead of these few lines, we would just call the 'Notify' method and pass this notification object like below: 
			foreach (var attendee in attendees)
            {
                attendee.Notify(notification);
			}
/// Then inside this method, the application user class would wrap this notification inside a user notification object and set user to this(attendee)
/// and next, it will add this user notification to its internal collection called UserNotifications.
/// Look at the code above. It is cleaner and more meaningful. We're simply delegating to the domain
/// Create this method with Resharper: Alt+Enter -> Enter, Enter Enter Enter. Copy the code from Controller inside this method:
/// Replace 'attendee' with 'this' because we are inside the ApplicationUser class 
/// We should not have _context in our ApplicationUser class. 
/// Context is about infrastructure. It's about persistence. It should not be inside our domain classes.
/// We want a domain model that is persistent ignorant. It knows nothing about persistence. It's just an object-oriented model of the world.
/// There is another way to achieve the same thing without using context: 
/// If in the ApplicationUser class, we had a navigation property called UserNotifications, we could add this userNotification object to this collection
/// and it would have the exact same effect: Entity Framework will treat this as a new object 
/// and when you called Save Changes, it will create a record in the database
/// Create this Navigation Property:
/// Go to top of ApplicationUser class, we already have 2 navigation property: Followers and Followees. So add another one:
        public ICollection<UserNotification> UserNotifications  { get; set; }
/// and initialize it in the Constructor: UserNotifications = new Collection<UserNotification>();
/// and now the Notify method is like below:
	public void Notify(Notification notification)
	{
		var userNotification = new UserNotification
		{
			User = this,
			Notification = notification
		};
		UserNotifications.Add(userNotification);
	}

////////////// Refactoring Ensuring Valid Object ///////////////
///	We have an important, but hidden problem here
/// UserNotification is the association class between User and Notification classes so it should always reference 
/// an existing user and a notification object. User property or Notification property here cannot be null
/// But with our current implementation, We can create a UserNotification like this:
		var x = new UserNotification();    => x.User and x.Notification are both null!!
/// This is the problem: Our UserNotification object can go in an invalid state and that's where things go wrong!
/// That's where we get null reference exceptions and all kinds of weird bugs.
/// So we want a domain model that protects its state.
/// Fix this problem:
/// put the cursor here on UserNotification -> Ctrl+B -> create a constructor in UserNotification.cs
/// Create 2 parameters: user and notification -> Alt+Enter -> second options in Resharper: Initialize auto-property...
		public UserNotification(ApplicationUser user, Notification notification)
        {
            User = user;
            Notification = notification;
        }
/// But we are halfway done. Before setting these properties, we want to make sure that these arguments are not null.
/// So add a this below condition to the begining of the above code:
		if (user == null)
			throw new  ArgumentNullException("user");

		if (notification == null)
			throw new ArgumentNullException("notification");
/// when you create custom constructors, you should always create a default constructor
/// So create ctor with no arguments but change it to protected so nowhere in the code we will use this but 
/// it's still available for Entity Framework at runtime.
/// Our constructor in UserNotification.cs is like below:
	protected UserNotification()
	{
	}

	public UserNotification(ApplicationUser user, Notification notification)
	{
		if (user == null)
			throw new  ArgumentNullException("user");

		if (notification == null)
			throw new ArgumentNullException("notification");

		User = user;
		Notification = notification;
	}
/// but there is still a problem in this class: the problem is the setter for the User and Notification properties.
/// These setters allow me to set these properties after they are initialized, but it doesn't make sense
/// I should not be able to change one end of the relationship because UserNotification is conceptually a different relationship.
/// So make the set; of these properties private:
		public ApplicationUser User { get; private set; }
		public Notification Notification { get; private set; }

/// With these simple changes, we can make sure that this user notification is always in a valid state.
/// Go back to ApplicationUser.cs -> instead of initializing User and Notification, pass 'this' and 'notification' as a parameter:
	public void Notify(Notification notification)
	{
		var userNotification = new UserNotification(this, notification);        

		UserNotifications.Add(userNotification);
	}
/// We can also change the code above to one line UserNotifications.Add(new UserNotification(this, notification));

///////////////// Refactoring Initialization Of Notification object //////////////////
/// look at this code:
			var notification = new Notification
            {
                DateTime = DateTime.Now,
                Gig = gig,
                Type = NotificationType.GigCanceled
            };
/// We have the same issue with Notification class: we can use var x = new Notification(); command to allow Gig prop to be null!
/// We don't need to set DateTime to Now here. This is the responsibility of a constructor of Notification
/// Go to Notification.cs and add:		
		protected Notification()
        {            
        }

        public Notification(Gig gig, NotificationType type)
        {
            if (gig == null)
                throw new ArgumentNullException();
            
            DateTime = DateTime.Now;
            Gig = gig;
            Type = type;
        }
/// The DateTime of a notification is not an attribute that I'm going to present to the user in a form for them to modify.
/// So I want to make sure this class protects its state. So for this reason, We decorate some of these properties with private set:
		public int Id { get; private set; } 				: technically, we should not be able to change the key of objects once they're created
        public DateTime DateTime {get; private set; }
        public NotificationType Type { get; private set; }	: It doesn't make sense to Cancel a gig and - somewhere else in the code, say no, it was Update!
		public Gig Gig { get; private set; }				: it cannot be changed once it's set

/// For now we are not touch 2 properties: OriginalDateTime and OriginalVenue because we are not working on them for now.
/// when we send notifications when gigs are updated, we can come back and revisit these properties.
/// Now we can go back to GigsController and simplify the initialization of the notification
		var notification = new Notification(gig, NotificationType.GigCanceled);

/// You see our action is getting cleaner and cleaner.
/// So we make a couple of minor modifications to the UserNotification class as well: 
/// Already in this class we set the setter of the User and Notification property to private
/// Do the same for fore keys too:
		public string UserId { get; private set; }
        public int NotificationId { get; private set; }
		
////////////////////// Optimization Linq Query for Attendees //////////////////////		
/// We are querying the database to get attendances for the given gig:
		var attendees = _context.Attendances
			.Where(a => a.GigId == gig.Id)
			.Select(a => a.Attendee)
			.ToList();

/// But also, on top of this action, we have another query to get the given gig: 
		var gig = _context.Gigs.Single(g => g.Id == id && g.ArtistId == currentUserId);

/// So here we are doing two round trips to the database and both of these are about a particular gig
/// A better way is to use eager loading. So we get the gig and all of its attendances.
/// Then we won't need these few lines for querying and we can make this action shorter.
/// Change the code which is in the beginnig of Cancel action like below:
/// Create Attecdances navigation prop into Gig.cs to be able to Eager Load in the code below:
		var gig = _context.Gigs
			.Include(g => g.Attendances)  -> Alt+Enter to create it in Gig.cs
			.Single(g => g.Id == id && g.ArtistId == currentUserId);
			
/// this create a property like below in Gig.cs:
		public ICollection<Attendance> Attendances { get; set; }
		
/// And we need to initialize it in the Constructor because it is a collection:
		public Gig()
        {
            Attendances = new Collection<Attendance>();
        }

/// Also, now that you are familiar with the concept of objects being in a valid state, We have to change the setter of this collection to private set:
	public ICollection<Attendance> Attendances { get; private set; }

/// because once its initialized, I want to make sure nowhere else in the code, I accidentally overwrite it with another collection.
/// We can add objects to this collection, remove objects from it, but we shouldn't be able to overwrite the whole collection with another collection.
/// So until now we have this code:
		var gig = _context.Gigs
			.Include(g => g.Attendances)

/// but what we want is attendee not just the attendance, so we need to include that as part of our eager load.
/// Here's the tricky part. This attendance is here as a collection, so I cannot type Attendances.Attendee
/// Attendee is not a property of collections
/// So the trick is to use the Select method: 
		var gig = _context.Gigs
			.Include(g => g.Attendances.Select(a => a.Attendee))
			.Single(g => g.Id == id && g.ArtistId == currentUserId);

/// And delete the query for initializing attendees variable:
		var attendees = _context.Attendances
			.Where(a => a.GigId == gig.Id)
			.Select(a => a.Attendee)
			.ToList();

/// The action is getting shorter.
/// And replace attendees variable with 'gig.Attendances.Select(a => a.Attendee)' in foreach block like below:
		foreach (var attendee in gig.Attendances.Select(a => a.Attendee))
		{
			attendee.Notify(notification);                
		}

//////////////////////////// Refactoring Cohesion /////////////////////////////
/// Cohesion: basically means things that are highly related should be together. You cannot, and you should not separate them.
/// Let's read the story of the Cancel action.
/// 1. first we are trying to find the gig for the given Id.
/// 2. If the gig is cancelled, will return NotFound. 
/// 3. Otherwise, gig set IsCanceled to true,
/// 4. Send a notification to all attendees of that gig
/// 5. Save Changes.
/// So this is the story that this action is telling us.
/// Step 3 to 5 are highly cohesive 
/// When you cancel a gig, you should also send notification to all attendees
/// More interestingly, all these lines are about changing the state of the domain.
/// The controller should not be involved in details of changing the state of the domain. It should simply delegate.
/// We saw an example of this at the beginning when we implemented the Notify method.
/// We are going to use the same technique and encapsulate these few lines inside a method called Cancel. Something like this: gig.Cancel();
/// gig.Cancel(); -> Alt+Enter to create this method -> cut these few line(until SaveChanges) in Controller and paste it in new method.
/// put the cursor on gig.(which is red) -> Alt+Enter -> last option 'Change all local gig' -> this
/// 'this' is grayed out because it's really not required. So let's get rid of it: 
		public void Cancel()
        {
            IsCanceled = true;

            var notification = new Notification(this, NotificationType.GigCanceled);
            
            foreach (var attendee in Attendances.Select(a => a.Attendee))
            {
                attendee.Notify(notification);
            }
           
        }

/// Now that we have implemented the Cancel method, we should not be able to set IsCanceled from outside this class.
/// because this would put our object in an invalid state.
/// So make the setter of GigCanceled private:
        public bool IsCanceled { get; private set; }

/// By the way, we are not finished here. These three lines are about querying:
			var gig = _context.Gigs
                .Include(g => g.Attendances.Select(a => a.Attendee))
                .Single(g => g.Id == id && g.ArtistId == currentUserId);
/// and it's not the responsibility of the controller to query the database.            
/// Later, in section about the repository pattern, we will encapsulate these lines inside a repository, 
/// and we will reduce these 3 lines to just 1 line.

//////////////// Fixing the Issue with Reverse Relationship //////////////
/// When running the application after these changes, We get an error.
/// Entity Framework thinks our model is changed whereas it hasn't
/// change model means if we execute add-migration, we should get a migration.
/// So we can test it with Add-Migration Foo and delete it after.
/// It is not empty:
		public override void Up()
        {
            AddColumn("dbo.Attendances", "Gig_Id", c => c.Int());
            AddColumn("dbo.UserNotifications", "ApplicationUser_Id", c => c.String(maxLength: 128));
            CreateIndex("dbo.Attendances", "Gig_Id");
            CreateIndex("dbo.UserNotifications", "ApplicationUser_Id");
            AddForeignKey("dbo.Attendances", "Gig_Id", "dbo.Gigs", "Id");
            AddForeignKey("dbo.UserNotifications", "ApplicationUser_Id", "dbo.AspNetUsers", "Id");
        }
/// Because earlier in one of the videos, we added a navigation property to the gig class called Attendances.
/// So Entity Framework thinks this is a new property or a new relationship, whereas it isn't.
/// It's simply the reverse relationship between Attendance and Gig.
/// When we create Attecdance.cs, we create navigation prop: public Gig Gig { get; set; }
/// But at that time, we did not create reverse relationship from Gig.cs to Attecdance.cs
/// We added that later, and Entity Framework, at the moment cannot see these two relationships being related.
/// That's why it thinks the model is changed and it wants to add a new column in the database.
/// So when something like this happens in your applications that means something is wrong in the configuration of the relationship within your classes.
/// Go to AttendanceConfiguration.cs:
	public class AttendanceConfiguration : EntityTypeConfiguration<Attendance>
    {
        public AttendanceConfiguration()
        {
            //// Many-To-One with Gig ////
            HasRequired(a => a.Gig)
                .WithMany()
                .WillCascadeOnDelete(false);
        }
    }
/// and each Gig has many what? We didn't specify that here. 
/// replace it with: .WithMany(g => g.Attendances)
/// So open up the Foo migration again. So we looked at the first problem but the second one is the same as first.
/// It tries to add a column called ApplicationUser_Id and UserNotifications table, and this is exactly for the same reason.
/// This happened because in one of our recent refactoring, in the User class, in the ApplicationUser class, we added 
/// a property called UserNotifications 
        public ICollection<UserNotification> UserNotifications { get; set; }
		
///and this simply represents the reverse relationship between the UserNotification and ApplicationUser,
/// but Entity Framework cannot see this at the moment.
/// Go to UserNotificationConfiguration:
	public class UserNotificationConfiguration : EntityTypeConfiguration<UserNotification>
    {
        public UserNotificationConfiguration()
        {
            HasRequired(un => un.User)
                .WithMany()
                .HasForeignKey(un => un.UserId)
                .WillCascadeOnDelete(false);
        }
    }
/// replace .WithMany() with:
                .WithMany(n => n.UserNotifications)

/// Go to Package manager -> Add-Migration Foo -Force -> All dissapear!! There is nothing here
/// So Go to Solution Explorer -> Delete Foo Migration
71. Storing Notification & Optimization of Cancelation of a Gig.

/////////////////////// Implementing Notification When a Gig Is Updated ///////////////////////
/// Gigs controller -> Update action -> 
/// Add this below Include method to eager load the gig with all its attendances and attendees
                .Include(g => g.Attendances.Select(a => a.Attendee))

///Create 'Modify' method:
            gig.Modify(viewModel.GetDateTime(), viewModel.Venue, viewModel.Genre);
/// First parameter is updated DateTime!
/// this method is not too bad(3 parameters), but if the Gig class had many more properties, 
/// it would be code smell to create a method that takes, let's say 10 parameters!
/// In that case, a better implementation would be to have only one parameter in the Modify method
/// which is of type Gig, but has all the updated properties.
/// Modify method is like this:
		public void Modify(DateTime getDateTime, string viewModelVenue, int viewModelGenre)
        {
            var notification = new Notification(this, NotificationType.GigUpdated);
            notification.OriginalDateTime = DateTime;
            notification.OriginalValue = Venue;

            this.DateTime = getDateTime;			///
            this.Venue = viewModelVenue;			///  Update the gig in this 3 lines
            this.GenreId = viewModelGenre;			///

            foreach (var attendee in Attendances.Select(a => a.Attendee))
            {
                attendee.Notify(notification);
            }
        }
/// We set two properties OriginalDateTime and OriginalVenue before updating the gig
/// This way, We can keep track of the original values
/// finally, We iterate over the attendees for this gig and notify them.
72. Implementing Notification When a Gig Is Updated.

////////////////// Using Factory Method to Create Objects /////////////////
/// So this implementation is working but there's a hidden problem here:
			var notification = new Notification(this, NotificationType.GigUpdated);
            notification.OriginalDateTime = DateTime;
            notification.OriginalValue = Venue;
/// With this implementation, it's possible that as a programmer forget to write these two lines.
/// And with this, our notification would be an invalid state.
/// So that's how problems happen! Our objects go in the wrong state,
/// They start to lie to the world, and things go wrong
/// This constructor here, in case of gigs being updated, it's not very helpful
/// There is a better and cleaner way to solve this problem: 
						use simple FACTORY METHODS			
/// A factory method is responsible for creating an object in a valid state.
/// go to Notification.cs -> make ctor private
/// because I don't want anywhere in the code to use this constructor anymore, 
/// because it can create objects in an invalid state.
/// in Notification.cs -> Create static method:
/// this factory method is responsible for creating a notification for a gig that was just created.
/// What parameter do we need here: The gig that was just created 
/// this factory method will call that private constructor that we already have

		public static Notification GigCreated(Gig gig)
        {
            return new Notification(gig, NotificationType.GigCreated);
        }
		
/// Duplicate the method above and rename it to GigUpdated
/// When a gig is updated, what do we need?
/// We need a reference to the new gig and the value of the OriginalDateTime and OriginalVenue
/// Then, before returning, set these two prop to make sure that this notification 
/// is always in a valid state:

		public static Notification GigUpdated(Gig newGig, DateTime originalDateTime, string originalVenue)
        {
            var notification = new Notification(newGig, NotificationType.GigUpdated);
            notification.OriginalDateTime = originalDateTime;
            notification.OriginalValue = originalVenue;

            return notification;
        }
/// Here this method has three parameters
/// For now it is OK
/// A cleaner implementation is to have only two parameters here, newGig, and OldGig 

/// Finally another factory method for GigCanceled:
		public static Notification GigCanceled(Gig gig)
        {
            return new Notification(gig, NotificationType.GigCanceled);
        }

/// Just one more step: in Notification.cs -> make setter of originalDateTime and originalVenue private.
/// We need to make them read only. So it can only be set if we use the right factory method.
		public DateTime? OriginalDateTime { get; private set; }
        public string OriginalValue { get; private set; }
		
/// with this, Notification is an immutable object which makes perfect sense, because Notification
/// is not something that the user is going to change. It's for the internal of the system

/// back to Gig.cs:
/// Replace new Notification with: 	var notification = Notification.GigUpdated(this, DateTime, Venue);
									var notification = Notification.GigCanceled(this);
								
73. Use Factory methods "GigCreated, GigUpdated and GigCanceled" to protect the state of the objects.


////////////////////////////////// 6. Mapping Domain Objects to DTOs //////////////////////////////////////
/// We're going to build an API which will be called to get the notifications 
/// for the currently logged-in user

///////////////// Building an API //////////////////
/// GET   /api/notifications     : need this endpoint
/// 1. Build this API	2. Call ut using jQuery 	3. Get the data 	4. render it on the client.
/// R-click on Controller/Api folder -> Add Controller... -> choose Web API 2 Controller -Empty -> Add
/// name it NotificationsController -> decorate with [Authorize]
/// We need a list of notifications for the currently logged-in user

		public IEnumerable<Notification> GetNewNotifications()
        {
            var currentUserId = User.Identity.GetUserId();
            var notifications = _context.UserNotifications
                .Where(un => un.UserId == currentUserId)
                .Select(un => un.Notification)
                .Include(n => n.Gig.Artist)
                .ToList();

            return notifications;
        }

/// Test the above API with Postman. OK.
/// We are exposing so much information to the outside world!
/// So, as a best practice, we should not expose our domain objects from our API
/// because domain objects are the internals of your application
/// Instead, we should return DTOs
/// These are the contracts for our API.
/// So all the input or output to the API should be DTOs, not domain objects.

////////////// Introducing DTOs //////////////
/// 1. Change IEnumerable<Notification> -> IEnumerable<NotificationDto> -> create with Alt+Enter
/// -> Move NotificationDto.cs it to Dtos folder
/// copy all the properties from the Notification class into this class, and then get rid of the ones
/// that we don't want to return to the client
/// Id prop deleted because we do not need to send it to the client. This is for the internal of app
/// Remove Annotation because we are not going to do validation on this DTO
/// change Gig to GigDto -> create with Alt+Enter -> copy all the properties from Gig to it
/// Id of Gig, which is useful because, potentially, we may want to add a link to a page where 
/// the user can see the details of the gig.
	
	public class NotificationDto
    {
        public DateTime DateTime { get; private set; }
        public NotificationType Type { get; private set; }
        public DateTime? OriginalDateTime { get; private set; }
        public string OriginalValue { get; private set; }
        public GigDto Gig { get; private set; }

    }
    public class GigDto
    {
        public int Id { get; set; }
        public bool IsCanceled { get; private set; }
        public ApplicationUserDto Artist { get; set; }
        public DateTime DateTime { get; set; }
        public string Venue { get; set; }
        public GenreDto Genre { get; set; }

    }
    public class GenreDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
    public class ApplicationUserDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

/// map Notification to NotificationDto:
/// Imagine the .Select method takes a Notification object and returns a NotificationDto.
		[HttpGet]
        public IEnumerable<NotificationDto> GetNewNotifications()
        {
            var currentUserId = User.Identity.GetUserId();
            var notifications = _context.UserNotifications
                .Where(un => un.UserId == currentUserId)
                .Select(un => un.Notification)
                .Include(n => n.Gig.Artist)
                .Include(n => n.Gig.Genre)
                .ToList();

            return notifications.Select(n => new NotificationDto
            {
                Gig = new GigDto
                {
                    Id = n.Gig.Id,
                    Artist = new ApplicationUserDto
                    {
                        Id = n.Gig.Artist.Id,
                        Name = n.Gig.Artist.Name
                    },
                    DateTime = n.Gig.DateTime,
                    IsCanceled = n.Gig.IsCanceled,
                    Genre = new GenreDto
                    {
                        Name = n.Gig.Genre.Name
                    },
                    Venue = n.Gig.Venue
                },
                DateTime = n.DateTime,
                OriginalDateTime = n.OriginalDateTime,
                OriginalValue = n.OriginalValue,
                Type = n.Type
            });
        }

/// now, look at the result. Our Notification object is now much more lightweight
/// It doesn't expose all those details about the domain.

/////////////// Using Automapper ////////////////
/// This mapping code is very noisy and redundant
/// Look at the names on the right and left side: It's very redundant!
/// AutoMapper is a convention-based mapping tool
/// We tell AutoMapper to map a source type to a target type
/// AutoMapper uses reflection to map individual properties of the source type to the target type.

//////// Install AutoMapper ////////
/// 1. PM> Install-Package AutoMapper -Version:4.1  (newer version cause error in PM)
/// 2. in NotificationsController:
/// After .ToList(); Add:
		
            Mapper.CreateMap<Genre, GenreDto>();
            Mapper.CreateMap<ApplicationUser, ApplicationUserDto>();
            Mapper.CreateMap<Gig, GigDto>();
            Mapper.CreateMap<Notification, NotificationDto>();

            return notifications.Select(Mapper.Map<Notification, NotificationDto>);

//////// Organizing AutoMapper Mapping ////////
/// We don't want to repeat these CreateMap statements(4 above lines) whenever we want to use
/// AutoMapper to map domain model to dto or vice versa.
/// We want to have a single place to store all mappings for AutoMapper.
/// More importantly, if I want to override these mappings or overriding the default conventions
/// we do it in one place
/// Refactoring: Organizing Automapper configuration:
/// 1. Solution Explorer -> R-Click App_Start -> Add Class... -> name it MappingProfile : Profile
namespace GighubV2.App_Start
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            Mapper.CreateMap<Genre, GenreDto>();
            Mapper.CreateMap<ApplicationUser, ApplicationUserDto>();
            Mapper.CreateMap<Gig, GigDto>();
            Mapper.CreateMap<Notification, NotificationDto>();
        }
    }
}
/// Finally, we need to tell AutoMapper that we have a profile called MappingProfile:
/// 2. Global.asax -> use Mapper.Initialize() method:
            Mapper.Initialize(c => c.AddProfile<MappingProfile>());

/// This method takes an action of iConfiguration

//////////// Using Camel Notation /////////////
/// properties returned from our API using Pascal naming convention
/// But we are going to use this data on the client side in JavaScript
/// And in JavaScript, it's ugly to use Pascal case
////// configure Web API to return data using CamelCase notation ////
/// go to WebApiConfig.cs -> 
			var settings = GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings;
            settings.ContractResolver = new CamelCasePropertyNamesContractResolver();
            settings.Formatting = Formatting.Indented;
			
/// Build -> Refresh Postman -> Beautiful!

////////// Correct the condition for API Notification action //////////
                .Where(un => un.UserId == currentUserId)
/// We should return only new notifications for the currently logged-in user:
                .Where(un => un.UserId == currentUserId && !un.IsRead)

74. Implementing Dtos and AutoMapper.


///////////////////////// 7. Working with Bootstrap Icons Badges and Popovers////////////////////////////
///// Add bootstrap Icon to Navigation Bar ///////////
/// Go to _LoginPartial -> 
					<li>
                        <a href="#"><i class="glyphicon glyphicon-globe"></i></a >
                    </li>
/////// display the number of new notifications in a badge to the right side of our globe icon /////////
/// Change as below:
					<li class="globeIcon">
                        <a href="#"><i class="glyphicon glyphicon-globe"></i></a >
                        <span class="badge">2</span>
                    </li>
/// in Site.css:
				.navbar-collapse .navbar-nav.navbar-right .globeIcon {
					position: relative;
				}

				.navbar-collapse .navbar-nav.navbar-right .badge {
					position: absolute;
					top: 8px;
					right: -1px;
					background: #a80a0a;
				}				

//// replace this hard-coded number	with the actual number of notifications	coming from the server /////
/// we need to call our API, get all the new notifications, and replace this number (2) here.
/// 1. Give badge a new class to use this as a selector when writing jQuery code:
	<span class="badge js-noticications-count"></span>
	
/// 2. Call the server and get the new notifications:
/// here's the tricky part: There might be a bit of delay between the time we call the server and get 
/// the number of new notifications. It may take half a second or more.
/// and at that point, I don't want to display an empty badge
/// a trick: use the Bootstrap hide class
	<span class="badge js-noticications-count hide"></span>
/// when we get the data from the server, we'll remove this class.

/// Where should we write our jQuery code? => 
/// LoginPartial, is a partial view and displays on Layout.cshmtl
/// 3. Go to _Layout.cshmtl:
/// Before </body> insert <script> tag:
	<script>
		$(document).ready(function() {
			$.getJSON("/api/notifications",
				function(notifications) {
					$(".js-noticications-count")
						.text(notifications.length)
						.removeClass("hide");
				});
		});
	</script>

75. Add bootstrap icon and badge for showing notifications count

//////////// Animating content with CSS ///////////
/// animate badge ////
/// 1. Search for animate css in google
/// 2. Download animate.css and put it in Content folder.
/// 3. Add it to BundleConfig.cs:
			bundles.Add(new StyleBundle("~/Content/css").Include(
                      "~/Content/bootstrap.css",
                      "~/Content/animate.css",         <--- This line is inserted
                      "~/Content/site.css"));

/// 4. in jquery code, add 2 below class to badge:
                    .removeClass("hide")
					.addClass("animated bounceInDown");
76. Animate badge for notifications count.

////////// 05. Using Bootstrap Popovers ///////////////
/// When the user clicks this globe icon, we want to display a popover:
		$(".globeIcon").popover({
            html: "true",
            title: "Notifications",
            content: function() {
                return "Hello world";
            },
            placement: "bottom"

////////////// 06. Adding Underscorejs ////////////////
/// We want to replace this hard-coded Hello World with the details of notifications coming from the server.
/// The poor way is to write the HTML here, something like this:
			content: function() {
                return "<ul>"
                    + "<li>" + "message of notifications.." + "</li>";
            },

/// as our markup gets more complex, maintaining this piece of code gets harder.
/// Plus, this code does not have separation of concerns. We are writing HTML in the middle of JavaScript.
/// A better way is to use a TEMPLATING ENGINE.
/// templating engine: we have our markup somewhere, and we have placeholders.
/// Then we can ask the templating engine to render the content based on some JSON object.
/// just like how we render views in ASP.NET MVC. There, we have a templating engine called Razor.
/// We have the same concept on the client side, in JavaScript.

/// Underscore is a very useful library. We can get Underscore at underscorejs.org
/// Add underscore-min.js into Scripts folder
/// Add it to BundleConfig. here's the tricky part: 
/// Underscore is an independent library. and it doesn't fall into any of these categories.
/// for now, I'll just put Underscore under jquery, even though it's not jQuery 
			bundles.Add(new ScriptBundle("~/bundles/jquery").Include(
                        "~/Scripts/jquery-{version}.js",
                        "~/Scripts/underscore-min.js"));

/// Before rendering notifications, test it rendering something very simple using Underscorejs.
/// to make sure my plumbing code is working before rendering complex markup:
			var compiled = _.template("Hello <%= name %>");

/// this template method will get the string and compile it into a function
/// this compiled variable here is actually a function
/// We call this function and supply a JSON object:
			compiled({ name: "Babak" });
			
/// Now, this compiled function will replace the value of this placeholder with what we've got 
/// here, which is Babak.
/// Store the result in a variable called html and return it:
			var html = compiled({ name: "Babak" });
			
/// Back to the browser, Refresh, Working!
/// Underscore is in place, template is working.
/// Next, we need to replace this template with a markup for notifications
77. Using Bootstrap Popovers and Adding Underscorejs.

////// 07. Rendering Content Using Underscore Templates ///////
/// We need to replace this template "Hello <%= name %>" with a markup for notifications
/// We are not gonna write that markup here because that would violate separation of concerns
/// 1. Set the script tag before earlier <script>
    <script type="text/x-template" id="notifications-template"></script>

/// Intention: make the browser ignore what we gonna do here 
///which will be our template(combination of js & html)

/// 2. Move(cut) 'Hello <%= name %>' from _.template to inside this new script tag 
    <script type="text/x-template" id="notifications-template">
        Hello <%= name %>
    </script>
/// 3. Use jQuery to get its's content.
    var compiled = _.template($("#notifications-template").html());

/// 4. Replace Hello <%= name %> with the actual markup for notifications
	<script type="text/x-template" id="notifications-template">
        <%
            _.each(notifications, function(notification){
                if(notification.type == 1) { %>
                    <li>
                        <%= notification.gig.artist.name %> has canceled the gig 
						at <%= notification.gig.venue %> at <%= notification.gig.dateTime %>
                    </li>
                <% }
            })
        %>
    </script>

/// 5. Pass the right Json object:
/// replace { name: "Babak" } with { notifications: notifications }
/// First notifications is the filed of Json object(that what we referencing in our markup) 
/// The second one is what we get from the server.
/// We need to move popover code into GetJSON code block to access this variable:
	<script>
        $(document).ready(function () {
            $.getJSON("/api/notifications",
                function (notifications) {
                    $(".js-noticications-count")
                        .text(notifications.length)
                        .removeClass("hide")
                        .addClass("animated bounceInDown");

                    $(".globeIcon").popover({
                        html: "true",
                        title: "Notifications",
                        content: function () {
                            var compiled = _.template($("#notifications-template").html());
                            var html = compiled({ notifications: notifications });
                            return html;
                        },
                        placement: "bottom"
                    });

                });
        });
    </script>

78. Rendering Content Using Underscore Templates.

//////////////// 08. Code Review //////////////////////
/// Show Gig Updated Notification in Popover 
/// Add below markup to .each loop after first if:
				else if(notification.type == 2) {
                   var changes = [],
                       originalValue = [],
                       newValues = [];
                   if(notification.originalDateTime != notification.gig.dateTime) {
                       changes.push("date/time");
                       originalValue.push(notification.originalDateTime);
                       newValues.push( notification.gig.dateTime);
                   }
        
                   if(notification.originalVenue != notification.gig.venue) {
                       changes.push("venue");
                       originalValue.push(notification.originalVenue);
                       newValues.push( notification.gig.venue);
                   }
                %>
                    <li>
                        <%= notification.gig.artist.name %> has changed the <%= changes.join(' and ') %> 
						of the gig at <%= originalValue.join('/') %> to <%= newValues.join('/') %>
                    </li>
                <%
                }
				
79. Show Gig Updated Notification in Popover

//////////////// 09. Handling Edge Cases //////////////////////
/// Here we have an edge case: What if the notifications array that we get from the server is empty?
/// Problem: displaying zero in a badge and the user see an empty popover, which doesn't make sense
/// we should display the badge and the popover only if we have at least one new notification.

////////////////////// 10. Summary ////////////////////////////
/// Badges are pretty useful when you want to display the number of new things to the user
/// like new tasks, new orders, new notifications, and so on.
/// We can render content on the client instead of server.
/// benefit : Increase the scalability of your applications,
/// because server resources are no longer used for rendering views for potentially millions of users.

80. Solve an edge case: displaying zero in a badge and the user see an empty popover


///////////////////////////////////// 08. Improving the Look and Feel ////////////////////////////////////////
///////// 01. Improving the Look and Feel of Popover ///////////
/// Get rid of bullets and padding on the left:
/// Give <ul> in template a class name 'notifications':
			<ul class="notifications">

/// in Site.css add below css:
		.navbar-collapse .navbar-nav.navbar-right .popover-content .notifications {
			list-style: none;
		}

/// But the notifications are too close to each other. 
/// add a border below each notification and a bit of vertical padding
			.navbar-collapse .navbar-nav.navbar-right .popover-content .notifications > li {
				border-bottom: 1px solid #ddd;
				padding: 10px 0;
			}

/// remove border from the last item:
			.navbar-collapse .navbar-nav.navbar-right .popover-content .notifications > li:last-child {
				border-bottom: none;
			}

////////////// 02.Overriding Popover Template  ////////////////
/// Remove padding around notifications:
/// Also we want these borders to be completely attach to the sides of the popover.
/// the padding is coming from its parent: popover-content (the green area in Inspect)
/// There are 2 ways:
/// 1. My way:
			.navbar-collapse .navbar-nav.navbar-right .popover-content {
				padding: 0;
			}
/// 2. Mosh way:
/// in getbootstrap.com -> copy template markup and add it to popover NOT WORK 
/// Successfully attach borders to the sides of the popover but we need padding for each item
/// Add padding: 10px; to .popover-content .notifications {}

//////////////////// 03.Making Text Bold //////////////////////
/// Make this artists name in notifications bold
/// The poor way of making this bold is to to use the <strong> tag.
/// The problem with this approach: what if in the future instead of making this bold, we want to
/// change its color or make it italic or make the font bigger 
/// A cleaner way is to wrap this text with a span and use a class like highlight
	<span class="highlight"><%= notification.gig.artist.name %></span>
	
/// Also we must add below css to Site.css:	
	.navbar-collapse .navbar-nav.navbar-right .popover-content .notifications > li .highlight {
        font-weight: bold;
    }	
81. Get rid of bullets, attach borders to the sides, proper padding, Making artist name Bold.

///////////////// 04.Formatting Dates using moment.js //////////
/// We don't want to display a date like this. This is for machines not for humans!
/// We need to parse this text as a date/time object and reformat it in a more readable way.
/// Go to www.momentjs.com -> download moment-with-locales.min -> Add Existing Item to Scripts folder
/// in BundleConfig add this to jquery(for now):
			"~/Scripts/moment-with-locales.min.js"));

/// change notification.gig.dateTime -> moment(notification.gig.dateTime).format("D MMM HH:mm")
/// change the if block if(notification.originalDateTime != notification.gig.dateTime) :
/// replace notification.originalDateTime with moment(notification.originalDateTime).format("D MMM HH:mm")
/// replace notification.gig.dateTime with moment(notification.gig.dateTime).format("D MMM HH:mm")

//////////// 05. Final Touch: Remove Shadow from Popover///////
/// We don't use shadows or gradients in flat design
/// Inspect -> look for class 'popover' -> untick box-shadow and -webkit-box-shadow
/// In Site.css:
			.popover {
				-webkit-box-shadow: none;
				box-shadow: none;
			}
82. Formatting Dates using moment.js and Remove Shadow from Popover







