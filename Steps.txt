

1. Install 2 extentions: Productivity Power Tools and Web Essentials

2. Prepare Requirements Document, then extract use cases from it, then extract core usecases

3. Add 6 use case to Git project: "Add a gig" to 'In progress' column. the other 5 to 'To do' column

4. Disjoin ApplicationDbContext.cs from IdentityModels in separate class.

5. Change the name of IdentityModels.cs to ApplicationUser.cs in order to be the same with it's class.

6. Enable-Migrations

7. Change Web.config to point to SQLServer on LND Server to create Database over there.

8. Add-Migration InitialModel

9. Update-Database

10. Create Gig.cs and Genre.cs

11. Add Gig and Genre DbSet to ApplicationDbContext in order to add refrence to them.

12. Add-Migration CreateGigGenreTables And Update-Database

13. Change Web.config to point to LapTop SQL and Update-Database.

14. Override Convention (Data Annotations method) to Gig and Genre classes.

15. Add-Migration OverrideConventionsForGigsAndGenres + Update-Database.

16. Add-Migration PopulateGenresTable + Fill Sql to generated migration class + Update-Database.

////// Building a view (not concern about saving data or validation or aesthetics...)  /////////////////
////// just purely user interface for adding a gig									   /////////////////
////// Create a simple form to allow us to capture a gig	  						   /////////////////
17. Create Gigs Controller + Change the name of default Action from Index to Create

18. Create corresponding view (Alt+Enter on View)

////// Add a link to Navigation bar to this View ////////////
19. in _Layout.chtml create link : Add a Gig

20. Add Bootstrap form to Create.chtml : Add model + Add TextBox for Venue

////// Create 2 TextBox for Date and Time in View //////////
////// We have a problem because in Mode we dont have separate fields for date and time ///////
21. Create a Folder name ViewModels + Create GigFormViewModel.cs with 3 prop: Venue, Date and Time +
	Change the model of view from Gig to GigFormViewModel + create 2 TextBoxs for Date and Time + 
	Build project (because we add new class)

22. Add DropDownList for Genre in Form + Add property "int Genre" to GigFormViewModel.cs + 
	Add IEnumerable<Genre> Genres to provide second argument for DropDownList(for source of data :options) +
	Build project (because change C# code in GigFormViewModel) => Refresh gets error because Genres is empty
	In Gigs Controller get the list of Genres from the database + make blank item selected as default in DrDList.

23. Add bootstrap Button


////////////////////////////////////// 06. Saving Data /////////////////////////////////////////////////
///// First We nedd to control aceess to GigForm : only for an authenticated artist ////////////////////
24. Decorate Create action with [Authorize], Then create a user: artist1 to enable to access "Add a Gig" action. 

///// Specify the target in the form for Save button to post info back to controller ///////////////////
25. @using (Html.BeginForm("Create, "Gigs")) instead of <form>

26. Create HttpPost Action "Create" to Save a gig to the database. We need to change viewmodel to gig object.

////////// Optimization of HttpPost Create Action //////////
/// the code in this stage is not optimize because we have 3 query of database ///
/// we can define foreign key for Artist and Genre do avoid unnecessary queries ///
27. Add ArtistId and GenreId to Gig.cs (make them required instead of its navigation property .
	