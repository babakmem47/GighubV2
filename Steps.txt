

1. Install 2 extentions: Productivity Power Tools and Web Essentials

2. Prepare Requirements Document, then extract use cases from it, then extract core usecases

3. Add 6 use case to Git project: "Add a gig" to 'In progress' column. the other 5 to 'To do' column

4. Disjoin ApplicationDbContext.cs from IdentityModels in separate class.

5. Change the name of IdentityModels.cs to ApplicationUser.cs in order to be the same with it's class.

6. Enable-Migrations

7. Change Web.config to point to SQLServer on LND Server to create Database over there.

8. Add-Migration InitialModel

9. Update-Database

10. Create Gig.cs and Genre.cs

11. Add Gig and Genre DbSet to ApplicationDbContext in order to add refrence to them.

12. Add-Migration CreateGigGenreTables And Update-Database

13. Change Web.config to point to LapTop SQL and Update-Database.

14. Override Convention (Data Annotations method) to Gig and Genre classes.

15. Add-Migration OverrideConventionsForGigsAndGenres + Update-Database.

16. Add-Migration PopulateGenresTable + Fill Sql to generated migration class + Update-Database.

////// Building a view (not concern about saving data or validation or aesthetics...)  /////////////////
////// just purely user interface for adding a gig									   /////////////////
////// Create a simple form to allow us to capture a gig	  						   /////////////////
17. Create Gigs Controller + Change the name of default Action from Index to Create

18. Create corresponding view (Alt+Enter on View)

////// Add a link to Navigation bar to this View ////////////
19. in _Layout.chtml create link : Add a Gig

20. Add Bootstrap form to Create.chtml : Add model + Add TextBox for Venue

////// Create 2 TextBox for Date and Time in View //////////
////// We have a problem because in Mode we dont have separate fields for date and time ///////
21. Create a Folder name ViewModels + Create GigFormViewModel.cs with 3 prop: Venue, Date and Time +ge
	Change the model of view from Gig to GigFormViewModel + create 2 TextBoxs for Date and Time + 
	Build project (because we add new class)

22. Add DropDownList for Genre in Form + Add property "int Genre" to GigFormViewModel.cs + 
	Add IEnumerable<Genre> Genres to provide second argument for DropDownList(for source of data :options) +
	Build project (because change C# code in GigFormViewModel) => Refresh gets error because Genres is empty
	In Gigs Controller get the list of Genres from the database + make blank item selected as default in DrDList.

23. Add bootstrap Button


////////////////////////////////////// 06. Saving Data /////////////////////////////////////////////////
///// First We nedd to control aceess to GigForm : only for an authenticated artist ////////////////////
24. Decorate Create action with [Authorize], Then create a user: artist1 to enable to access "Add a Gig" action. 

///// Specify the target in the form for Save button to post info back to controller /////
25. @using (Html.BeginForm("Create, "Gigs")) instead of <form>

26. Create HttpPost Action "Create" to Save a gig to the database. We need to change viewmodel to gig object.

//////////////////// Optimization of HttpPost Create Action //////////////////////////////
/// the code in this stage is not optimize because we have 3 query of database 
/// we can define foreign key for Artist and Genre do avoid unnecessary queries 
/// benefit of Foreign KEy: they save us from unnecessary queries to load related objects. 
27. Add ArtistId and GenreId to Gig.cs (make them required instead of its navigation property.

28. Add-Migration AddForeignKeyPropertiesToGig + Update-Database
	in gig object: replace Artist with ArtistId and Genre with GenreId

29. Remove 2 unnecessary queries from HttpPost Create Action and refactoring code.

/////////////// Separation of concern : Responsibility of Controller and View ////////////
/// Controller not responsible for parsing string value into DateTime object.  
/// Controller shoud act as a coordinator for application logic: WHAT SHOULD HAPPEN NEXT! 
/// Controller is like a manager. Not do the actual work. 
/// Information Expert Pronciple: Class/Object that has the information to do sth, should be the one  
/// that will carry that responsibility. So the viewModel is the class that knows about Date and Time!
30. Transfer the parsing Date and Time task from Controller to ViewModel class.

///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////// 07. Implementing Validation /////////////////////////////////////
/////////////////////////// Server Side Validation ///////////////////////////////////////
31. 1. Make view model prop required. 2. Add placeholder in view for validation messages 3. Modify Controller: ModelState.IsValid

/// We get an error when not filling textboxes : String was not recognized as a valid DateTime
/// in line 27: get { return DateTime.Parse(string.Format("{0} {1}", Date, Time)); }
/// technically we should not have get this error because apparently it should not reach the line of code for referencing Date and Time.
/// Reason: because mvc use its "reflection" to construct a viewmodel. So its going to touch all prop of viewmodel.
/// Fix Issue: we need to convert this property to a method => mvc not anymore touch datetime property using reflection
32. Convert DateTime prop of viewmodel to GetDateTime() method to avoid reflection error.

/// We get another error : Value cannot be null. Parameter name: items for DropDownList in view ///
/// Reason: Genres is not populated(not initialized)
33. Populate Genres prop of viewmodel before send it back to view.

/////// Implementing Custom Validation for Date and Time (Server Side) ////////
/// Add FutureDate.cs that derive from ValidationAttribute. Add Override IsValid method in it. 
/// Decorate Date prop of viewmodel to [FutureDate] 
/// => at runtime, value parameter in IsValid method in FutureDate would be a value of Date prop in viewmodel
/// At FutureDate.cs perform Date validation and return the result
34. Add FutureDate.cs & override IsValid method in it & decorate Date prop of viewmodel to [FutureDate]

35. Add ValidTime.cs & override IsValid method in it & decorate Time prop of viewmodel to [ValidTime]

/////////////////////// Client Side Validation ///////////////////////////////////////////
/// To check if it is enable -> Inspect - Network tab - click Save : We can see the post request "Create" send to Server
/// Reason : we have not enabled client side validation!
/////// Enabling Client Side Validation /////////
/// There are 2 js files that are responsible for validation in jquery: jquery.validate.js and jquery.validate.unobtrusive.js
/// Microsoft put these 2 files in separate bundle to return them to only pages where we need them.
/// Idea of Bundle : we can get one or more js/css files, put them in a bundle and then at runtime 
/// asp.net will combine them and compress them before returning to the client(for optimization)
/// We do not need to sent them to every request from client. So we need to add jqueryval bundle to our Create.chtml
/// @RenderSection in _Layout.chtml : use for adding additional scripts to a page. So in that section we add jquery validation.
36. Add @section scripts with jqueryval bundle to Create view for client side validation.

// The reason we need section scripts in view : to ensure that the jqueryval bundle comes after jquery definition.
// at this point both jquery and bootstrap are downloaded
// Fresh Download of page from server : add ? at the end of url - Clear all request in Network tab then Save.



///////////////////////// 08. Preventing Common Web Application Vulnerabilities //////////////////////////////
////////////// SQL Injection ////////////////////
/// Allow an attacker to execute malicious SQL statements in your application. : Get the list of all users, delete a record...
/// var sql = "select * from users where userId = " + userId  => input: "1243 or 1" always true
/// change sql = "select * from users where userId = @userId"
/// in out application we dont have this vulnerability because we are not generating sql at runtime => let EF generate sql statements
/// DANGEROUS: _context.Gigs.SqlQuery("select * ...", input)

///////// Cross-site Scripting (XSS)//////////////
/// Enable an attacker to execute malicious script on the victim's computer : they steal the user's cookies and highjack session
/// They can also access to user's Geo-Location, Webcam, File System and ...
/// Attacker insert malicious js into the pages of trusted website.
/// Prevent : 1. Escaping content: tell browser to treat the content as a simple string and not interprete at any other way.
/// <script> --> Escape: &lt;script&gt;
/// in out application we dont have this vulnerability because MVC rejects js in the input fileds of the form.
/// also Razor view automatically escape content.	Exception: Html.Raw()

//////// Cross-site Request Forgery (CSRF)////////
/// Allow an attacker to perfor actions on behalf of a user without their knowledge.
/// Prevent: use @Html.AntiForgeryToken() in view and decorate [ValidateAntiForgeryToken] in Controller
37. Add @Html.AntiForgeryToken() in Create.chtml and decorate Create action with [ValidateAntiForgeryToken]

/// inspect - Elements - in Form : <input ...type="hidden" value="Random Token" ...>  This is the first part(Generate hidden field)
/// Second part: Its also created a cookie that includes the encripted version of this token:  
/// to see this encrypted token: in inspect go to Application - Cookies - __RequestVerificationToken
/// The attacker may be able to steals the user's cookie but they won't have access to hidden field because
/// the only way to get the hidden field is to get the user to visit the trusted page! not the malicious page.
/// Test: Delete random token(value="random token") and try to post 


/////////////////////////////// 09. Moving Towards a Beautiful Design ////////////////////////////////////////
///// Change the color of navigation bar /////////
/// R-click on it and inspect: click on its parents(<div class="navbar navbar-inverse navbar-fixed-top">) 
/// change backgrounf-color="FF4342" and border-color="FF4342" in the right 
/// Add these changes to our stylesheet: 
/// copy the right side of inspect, open Site.css, at the end of it add a comment: /* Bootstrap Override */ then paste the css

//////////// Make the links white ////////////////
/// R-click on one link + inspect: at right .navbar-inverse .navbar-nav : change the color="#FFF" + copy and paste to Site.css

///////// Make 'Application name' white //////////
/// R-click on one link + inspect: at right .navbar-inverse .navbar-brand : change the color="#FFF" + copy and paste to Site.css
38. Bootstrap Override: find the proper css with the help of inspect elements and copy and paste it at the end of Site.css and Save.
/// To force chrome to reaload css and js: CTRL + SHIFT + R

////////////// Choosing a Font ///////////////////
/// Go to fonts.google.com. Choose Open Sans & Lato & Montserrat => +Select this font. 
/// In customize select font size regular:400 bold:700
/// Copy entire embeded line href and open _Layout.chtml and paste it in <Head> just before Render and Save
/// To compare and feel changes: open Home page on another tab too and do the following change in it:
/// R-click on any character - Inspect - Computed tab - Find font-family - click to go to definition in css
/// Notice that we have definition on line 313: bootstrap.css:313
/// select 'Helvetica Neue' and change it to 'Open Sans' and Enter. Still not feel any changes!
/// We need to change the Heading fonts also : R-Click on a heading. on the right it is a section for h1 h2 h3 ... h6
/// Notice that we have definition on line 474: bootstrap.css:474 
/// select 'Helvetica Neue' and change it to 'Open Sans' and Enter. 
/// Now we can compare it to old tab!!! specially headings are changed
/// To change in VS : Open bootstrap.css Search for 'Helv'. copy h1,h2,... to Site.css. Add Lato in front of another fonts
/// Insert 'body,' at the beginnig of block. Delete 'line-height' and 'color' lines. Delete unwanted font from <link href=...>
39. Add <link href...> for wanted font in <head> in _Layout.chtml. Copy related css from bootstrap and paste in in Site.css

//////// Increase the margin of DIV //////////////
/// R-Click on a lable. Hold the mouse pointer on <div class="form-group"> : Blue area is div and yellow area is the margin
/// With the <div class="form-group" selected : on the right side we can change 'margin-bottom' with arrow key up and down.
/// Increase it to 20px. Copy the block of css and paste at the end of Site.css

/////// Increase the Font Size of NavBar /////////
/// R-Click on a text in page. Go to Computed -> font-size -> go to definition -> increase to 17px;
/// Create body { font-size: 17px;} above h1,h2,h3... in Site.css

/////// Increase the font size inside inputs /////
/// R-Click on a text inside an input. in the right side in form-control, find font-size and increase it to 17px;. Or
/// instead we can Go to Computed -> font-size -> go to definition -> increase to 17px;
/// Create .form-control { font-size: 17px;} at the bottom of Site.css

//////// Increase Padding/Size of TextBoxes //////
/// Out TextBoxes are too small. We want more chunky TextBox
/// R-Click on a TextBox. in the right side in form-control, find padding and increase it to 20px; 15px;
/// add 'padding: 20px 15px;' in .form-control block that we already created in Site.css

/////// Add more Roundness to the TextBoxes //////
/// add 'border-radius: 9px;' in .form-control block that we already created in Site.css

///////// Improve the look of Button /////////////
/// .btn { font-size: 17px; padding: 7px 20px; border-radius: 9px;}
40. Increase DIV margin, Font size and shape and roundness of elements in form

//// Dissapearing Inputs Hover/Shadow Effect /////
/// R-Click on a TextBox. in the right : click on :hov(Toggle element state) -> tick :focus -> .form-control:focus { } appears!
/// Untick webkit-box-shadow: and box-shadow:
/// .form-control:focus { webkit-box-shadow: none; box-shadow: none; }

////// Change border color of Inputs focus ///////
.form-control:focus { border-color:} -> click on rectangle color icon -> pick a color! -> border-color:#2196f3 for example
/// .form-control:focus { border-color: #2196f3 }

41. Override focus style (remove shadow arount inputs and change border color) and put it after .form-control in Site.css

////////////// Adding a DropDownList to NavBar ///////////////////
/// Copy NavBar right DropDown pattern from bootstrp and paste it in _LoginPartial.cshtml inside form: class ="navbar-right"
42. Adding a DropDownList to NavBar

//// Change black background color of DropDownList in NavBar /////
/// R-Click on a DropDownList. in the right :  click on rectangle to pick color (color picker) -> go to navbar to choose desired color.
/// We can pick darker bg-color and then play with opacity to make it blend with a bg a little bit more!
/// copy the style and paste it in site.css beside other css for NavBar.

//// Dissapearing Shadow around DropDownList /////
/// Select <ul class="dropdown-menu"...</ul> : on the right untick webkit-box-shadow: and box-shadow
/// Add css .dropdown-menu {  } to Site.css

///// Change triangle on the right of DropDown gray -> white /////
/// R-Click on a little triangle. on the right > a .caret { border-top-color: #fff; border-bottom-color: #fff; }  => add css to Site.css
43. Change css of DropDownList: change bg-color, remove shadow and change triangle color

/// Rename 'Application name' to Gighub and remove Home in _Layout.cshtml

/// Make difference between 'Gighub' and 'Add a Gig'. make 'Gighub' stand out ////
/// Notice that Gighub is in the <a class=navbar-brand...
/// R-Click on a 'Gighub'. in the right : .navbar-brand {} add font-weight:700;
44. Change Application name to Gighub and make it bolder

///////////////////////////////////////////////// 10. Usability Best Practices /////////////////////////////////////////////////////////////
/// Some Key Principles of Usability :
/// Lables: Keep them short, Be consice, Dont use ambiguous words. Use Top Align in forms (or right align) 
/// Fields: Reduce the number, See if you can remove optional fields or separate them from mandatory fields.
/// If you have many fields, Group related fields tha logically make sense. if that is not sufficient, break the entire form into Wizard.
/// Specify the format for field such as Date, Time, Ip,... : Add watermark
/// Set the focus on the first field in the form: save the user from one extra click!

/////////// Tell the user all the fields are mandatory ////////////
/// One practise: put asterisc (*) or lable like required next to those required fields.
///// Add a lable on top of the form that tells all fields are required. /////
///<p class="alert alert-info"><strong>All Fields are required</strong></p>

///////// Put the Focus on the First Field of Form ////////////////
/// use autofocus in : @Html.TextBoxFor(m => m.Venue, new { @class = "form-control" , autofocus = "autofocus" })

////////// Add Watermark on the Date and Time Fields //////////////
/// Add placeholder to Date and Time: @Html.TextBoxFor(m => m.Date, new { @class = "form-control", placeholder = "eg 1 Jan 2019" })
45. Add 'All Fields are required' lable of top of form + Put focus on the first field + Add watermark to Date and Time fields.

/// Action: each form shoul have a primary action. It's bettter to avoud secondary action. Change 'Cancel' button bg-color to white or make it a link
/// Primary action should stand out. Align primary action with input fields. 

/////////////////////////////////////// Validation //////////////////////////////////////////////
/// Provide clear and concise validation messages for users. Use red to indicate errors and green to indicate successfull messages. 
/// Provide smart defaults: Detect location using Ip Address or Html5 Location Api to fill the location textbox.
/// Or calculate the value in some fields based on the value in other field, Go ahead and do that for users.

//////// Make Validation Messages Red ////////////////
/// R-Click on a validation error: in the right : click its parent: <span class="field-validation-error".. 
/// -> click on + icon : add color: red; font-weight: bold; -> copy css(span.field-vali...) and paste it in Site.css
/// because class="field-validation-error" is not bootstrap class and It's part of MVC,  we define it on top section of Site.css
/// For the border of Textbox to be red when validation error occur : .input-validation-error { border: 2px solid red; }
46. make validation error messages red and also the border of Textboxes include invalid value.


////////////////////////////////////////////// 11. Extending ASP.NET Identity Users//////////////////////////////////////////////////////////
/////// Fill Home page with the list of upcomig Gigs ///////////
/// Read from database all upcoming gigs and show it in /home/index
/// Be Careful: Not define _context readonly!
/// In Index Action of Home Controller, read all gigs from database using Include (for reading artist too). Send list to Index View.
47. Show all upcoming gigs (DateTime and ArtistUsername) at home page.

///////////////// Add Name property to Our User ////////////////
/// IdentityUser class does not have the Name property. We need to manually add it.
/// Open ApplicationUser.cs -> Add public string Name at the beginning and decorate it as [Required] and [StringLength(100)]
/// Add-Migration AddNameToApplicationUser : because we have extended our domain-model + Update-Database
/// In View display Name of the artist instead of UserName : @gig.Artist.Name + Build
48. Add Name prop to AspNetUser class + Add-Migration + Update-Database

///////// Modify Signup form to capture Artist's Name //////////
/// Open Register.cshtml. Copy one of div block and paste it at the beginnig of form.
/// Create Name prop in RegisterViewModel and decorate [Required] and [StringLength(100)]
/// AccountController -> Register Action -> Initialize Name in new ApplicationUser instance(user)

///////////// Cleanup AccountViewModel: Move Files//////////////
/// Separate RegisterViewModel with Alt + Enter -> put the cursor on the class name(RegisterViewModel) and activate Refactoring Commands(Ctrl+Shift+R)
/// Select second option(Move To Folder... select GighubV2\ViewModel) and Next
49.  Disjoin classes in AccountViewModel and move them into ViewModel folder


///////////////////////////////////// 12. Creating-Beautiful-and-Precise-Designs-with-CSS ///////////////////////////////////////////////////
/// List gigs in Home page in specific style
/// Zen Coding: comes with Web Essentials plugin
/// (div.date>div.month+div.day)+(div.details>span.artist+span.genre): put the cursor at the end of the line and press tab!
/// to display only Date: DateTime.ToString("d ") => put space after 'd'
/// Personal preference: use 'div' when want to create a layout and use 'span' when want to add style to some text
/// in HomeController: eager load Genre too. 
50. List gigs (Month/date Artist/Genre) in home page with ZenCoding. 

/// Relative and Absolute positioning in css:
/// An element with 'relative position' allow us to 'absolutely' position its children.
/// We want to move details to the right of date => set the position of 'details' to absolute and it's parent(<li>) to relative.
/// First we need to give <ul> (at the top of view) a class to be able to identify this element and it's children in css.
/// <ul class="gigs">
/// at the end of Site.css add new comment for new part: /* Page-Level Styles */
/// Site.css: .gigs > li : > means li that immediately below gigs element.
/// .gigs > li { position : relative;  margin-bottom: 30px; }
/// .gigs > li .details { position: absolute; top: 0; left: 100px; }
/// remove bullet points: .gigs { list-style: none; }
51. Move Artist/Genre to the right of Date/Time and remove list bullet point.

///////// Build a Calendar icon /////////
/// Put Browser and VS side by side: Open Browser => Win + -> => Open VS => Win + <-
/// Make bg-color of Date red and color of the text white and align text to center
/// if not set 'width', it set to 100% and it is bad!
/// Set width= 60px;
/// Make text of Date and Month Uppercase :  .gig > li .date .month { text-transform: uppercase; }
/// Make text of Date and Month a little smaller (16px;) and bold: font-size: 14px;  font-weight: bold;
/// add space between date and surrounding area : padding : 2px 6px;
/// ser bg-color of Day to gray and text color dark. Make font a little bigger: 20px; add more padding to day.
/// Make corners of a Date container round:		border-radius: 8px;
/// Make artist name bold and put the genre on the next line. .gigs > li .details .artist { font-weight: bold; display: block;}
/// Make Genre a little smaller
/// add space betwwen top of page and first item of list(first gig) : on the very top of Site.css set padding-top to 90px;
52. add css to day/month/artist/genre

///////////////////////////////////// 13. Implementing a Use Case from Top to Bottom ///////////////////////////////////////////////////
///////// Add a Gig to the Calendar //////////
/// When building Software, Do not attempt to model the universe!  Gig Calendar Month Day GoogleCal iCal ...
/// Pay attention to only create enought of the model to solve the problem at hand.
/// The problem: Keeping track of the gigs the user  might be attending.
/// Solution : simple association btw User and Gig => many to many relationship
/// We need 3rd table name Attendance but we add this manually: becasue we need to query that directry
/// Add Attendance.cs to project  ApplicstionUser Attendee, string AttendeeId, Gig Gid, int GigId
/// We need a composite primary key (AttendeeId, GigId) : decorate both with [Key]
/// Specify order for primary key : decorate both with [Column(Order = 1)], [Column(Order = 2)]
/// Go to adbc add add DataSet<>  -> Add-Migration AddAttendance -> Update-Database
/// Update-Database cause an error because both User and Gig have cascadedelete on Attendance.
/// Solution: disable CascadeDelete in one of these relationship. 
/// Its better not to delete a Gig and just cancel it: allow user to undo the cancellation
/// So if we never delete a gig, it is Ok to disable CascadeDelete btw Gig and Attendance

//////// Disable CascadeDelete btw Gig and Attendance using FluentApi /////////
/// Create a Folder: EntityConfigurations/AttendanceConfiguration.cs define constructor define FluentApi:
/// Add Attendance relation with Gig : Many to One with WillCascadeOnDelete(false).
/// Pay attention because we dont have navigation prop in AspNetUsers table, we cannot name it in WithMany(nav-prop). So leave it empty.
/// Of course we can add nav-prop in ApplicationUser for Gig but we also can leave it empty.
/// Re-Generate Migration : -Force + Update-Database
53. Add Attendace.cs(many-to-many relation btw User & Gig) to represent 'add a Gig to Calendar' info. Remove CascadeDelete with Gig.

/////// Add Button at the right bottom of each Gig ////////
/// When user click on btn, bg-color of btn change from white to blue and also add corresponding gig to the calendar.
/// To implement this, we are gonna use Ajax becasue we dont want to a full page reload. So on the server we create a lightweight API.
/// Create /api/attendances with HTTPPOST is more common. We'll need to include some data in the request body : gigId, Not UserId!
/// the UserId (id of currently loged in user) should be calculated on the server.

/////// Building the API /////////
/// R-click on 'Controllers' -> Add Controller... -> Add Web API 2 controller-Empty -> name it: AttendancesController
/// Copy the last line of 'readme.txt' and put it in Global.asax(at the begining of Application_Start method) -> Save 
/// So in Attendances Controller we need to recieve an id from view, create a new attendance obj, add it to the context and save changes.
/// We need to use [Authorize] for this controller because we get user id in action of this controller.
/// this is very basic implementation: Not checking duplicate, not error handling.
/// Asp.net WebApi by default does not look for scalar parameter like an integer in the request body. It expects them to be in the URL
/// So we decorate int parameter to [FromBody] attribute to tell web api to receive it from the body of request
/// Build + test with postman
/// Note: It is not necessary to put api in Api folder under Controllers in Solution Explorer, 
/// But it is necessary to bring /api/ before the name of api controller in the URL at the beginnig of the request. : http://localhost:14143/api/attendances

/////// Testing the Api with Postman ///////
/// The first Postman which is more popular in google have problem with authentication
/// Open Postman -> Copy address bar to 'Enter Request URL here' section. replace the address of api: /api/attendances/
/// Change GET to POST -> click 'raw' button : this is our request body 
/// Click Send -> See html respond : Authentication is not working => Authorize tag navigate us to login page(home/index)
/// ERROR: if not set [FromBody] for gigId in Api, get this error: "Message": "The requested resource does not support http method 'POST'."
/// ERROR: if not Login : status 200 OK but get HTML in the result which should not have happend! 
/// we can see: <title> Log in - ... in html becasue the authentication is not working and the api is redirecting me to the login page
/// ERROR : "Message": "The request entity's media type 'text/plain' is not supported for this resource.", => We missed the header 
/// SOLUTION: click Header(0) -> in Header: type Content-Type and in Value: application/json
/// When Post request in Api is working: The body of respont is empty and STATUS: 200 OK
/// ERROR: if click one more time(body is the same) => get error: in the middle of message: "Violation of PRIMARY KEY constraint"
/// So we need to modify our action to prevent duplicates

/////// Preventing Duplication in Api //////////
/// Having Attendance class in our model let us directly query that.
/// We have to check if attendance obj already exist for the current user and the given gig. 
/// var alrearyExist = _context.Attendances.Any(a => a.AttendeeId == currentUserId && a.GigId == gigId);
/// return a message instead of error: if (alrearyExist) { return BadRequest("The attendance already exists."); }. 
/// We can click again to see a message: STATUS: 400 Bad Request + { "Message": "The attendance already exists." }
54. Build an api for adding attendance + prevent duplication with providing error message and returning Bad Request(STATUS:400)

///////// Add a toggle Button (Going? white -> Going blue) in each Gig //////////////
/// in index.html -> details ->  Add a button after the 'Genre'. -> Refresh page. This button is a little big!
////// Decrease the size of Button /////////
/// use bootstrap class: "btn-sm" to smallize the button. It's not working! because of a mistake we made in earlier bootstrap overriding!
/// It's not working because we define .btn in Site.css after bootstrap classes. So it override all bootstrap classes!
/// Solution: temporalily comment out font-size and padding attribute in .btn in Site.css
/// Problem: Buttons are not align
/// Solution: use another bootstrap class: "pull-right" for button in index.cshtml
/// Problem: if Artist name is short, pull-right not work properly.
/// Solution: Define style="min-width: 150px;" for detail div. So in .gigs > li .details .genre { min-width: 150px; }
55. Add a Button to each Gig and do css to align it

///////////// Wiring up the Button to the API ////////////////////
/// Write some JS at the bottom of index.cshtml
/// Remember: What we put here will be rendered AFTER all js libraries like jquery or bootstrap
/// We need an identifier for our button: Define a new class(a marker) for the buttton: use js-toggle-attendance to mark the button.
/// Make ajax call for clicking btn: use jquery 'post' method.
/// Ajax post method: 1st argument: URL of api. 2nd arg: data we want to send in the request body which shoud be the 'gigId'

////// Where do we get gigId? /////////
/// We need to add it to the button as a data attribute : <button data-gig-id="@gig.Id" ...
/// To use it: Put 'e'(represent event) in the arg of click function for button. 
/// From event we could get the source of the event which is the button
/// use $(e.target) as the second parameter for post method of Ajax to 
/// $(e.target) : gives the source of event
/// Test: $(button).click(function(e) { console.log(e.target) });						=> give me a whole <button> tag! in console
/// Test:								console.log($(e.target).attr("data-gig-id")		=> give the id of gig that we click!
/// Ajax post method with these two parameter, post to api and return a promise. So we can chain the done and fail methods.
/// Chaining allows us to run multiple jQuery methods (on the same element) within a single statement.
/// Use .done chain method if the call of api is successfull and do operation within it.
/// if Api call is successfull: Change the lable and Background-Color of Button use chain method .removeClass("btn-default").addClass("btn-info").text("Going");
56. Write JS at the end of index.cshtml and add Ajax call for /api/attendance. if success, change btn css else alert.

/// A MISTAKE: in ajax call, Controller cannot bind recieved value to the gigId parameter: ASP.net expect the request from the body ([FromBody])
/// In order to bind these two value, we need to put ajax parameter to 'object literal': {"key" : "value"}
/// change $.post("/api/attendances", button.attr("data-gig-id")) --> $.post("/api/attendances", { "" : button.attr("data-gig-id") })

////////// Cleaner way to bind data parameter in ajax to gigId parameter in Api Controller HttpPost Action //////////
/// in JS: replace empty string "" with 'gigId' : now it look likes { gigId: button.attr("data-gig-id") }
/// Create a new class to wrap this gigId parameter : class AttendanceDto
/// DTO(Data Transfer Object): an architectural pattern to send data across processes. In client side we have some piece of code and in server side we have some other pieces.
/// To communicate between these two pieces of code(2 Processes) use DTO
/// Create Class AttendanceDto.cs and put it in separate folder "Dtos".
/// Now in AttendanceController replace '[FromBody] int gigId' with AttendanceDto dto -> replace 2 gigId(local variable) with dto.GigId
/// Test the project => Something falied!
/// To find out what is wrong: Ctrl + Shift + i -> click red cross icon with 1 beside it ->  400 (Bad Request)
/// Reason: We already have an attendance for this gig for the current user.
/// For other gigs it works! Hurra
/// Ideally when we render a list of gigs, a 'Going' buttons should be in the state that provide user information: blue if user already registers attending to each gig. Do in the future.
57. Replace Ajax second param with key:value. Use DTO object to communicate between JS code(Ajax) and API. Now the button 'Going?' works.