

1. Install 2 extentions: Productivity Power Tools and Web Essentials

2. Prepare Requirements Document, then extract use cases from it, then extract core usecases

3. Add 6 use case to Git project: "Add a gig" to 'In progress' column. the other 5 to 'To do' column

4. Disjoin ApplicationDbContext.cs from IdentityModels in separate class.

5. Change the name of IdentityModels.cs to ApplicationUser.cs in order to be the same with it's class.

6. Enable-Migrations

7. Change Web.config to point to SQLServer on LND Server to create Database over there.

8. Add-Migration InitialModel

9. Update-Database

10. Create Gig.cs and Genre.cs

11. Add Gig and Genre DbSet to ApplicationDbContext in order to add refrence to them.

12. Add-Migration CreateGigGenreTables And Update-Database

13. Change Web.config to point to LapTop SQL and Update-Database.

14. Override Convention (Data Annotations method) to Gig and Genre classes.

15. Add-Migration OverrideConventionsForGigsAndGenres + Update-Database.

16. Add-Migration PopulateGenresTable + Fill Sql to generated migration class + Update-Database.

////// Building a view (not concern about saving data or validation or aesthetics...)  /////////////////
////// just purely user interface for adding a gig									   /////////////////
////// Create a simple form to allow us to capture a gig	  						   /////////////////
17. Create Gigs Controller + Change the name of default Action from Index to Create

18. Create corresponding view (Alt+Enter on View)

////// Add a link to Navigation bar to this View ////////////
19. in _Layout.chtml create link : Add a Gig

20. Add Bootstrap form to Create.chtml : Add model + Add TextBox for Venue

////// Create 2 TextBox for Date and Time in View //////////
////// We have a problem because in Mode we dont have separate fields for date and time ///////
21. Create a Folder name ViewModels + Create GigFormViewModel.cs with 3 prop: Venue, Date and Time +ge
	Change the model of view from Gig to GigFormViewModel + create 2 TextBoxs for Date and Time + 
	Build project (because we add new class)

22. Add DropDownList for Genre in Form + Add property "int Genre" to GigFormViewModel.cs + 
	Add IEnumerable<Genre> Genres to provide second argument for DropDownList(for source of data :options) +
	Build project (because change C# code in GigFormViewModel) => Refresh gets error because Genres is empty
	In Gigs Controller get the list of Genres from the database + make blank item selected as default in DrDList.

23. Add bootstrap Button


////////////////////////////////////// 06. Saving Data /////////////////////////////////////////////////
///// First We nedd to control aceess to GigForm : only for an authenticated artist ////////////////////
24. Decorate Create action with [Authorize], Then create a user: artist1 to enable to access "Add a Gig" action. 

///// Specify the target in the form for Save button to post info back to controller /////
25. @using (Html.BeginForm("Create, "Gigs")) instead of <form>

26. Create HttpPost Action "Create" to Save a gig to the database. We need to change viewmodel to gig object.

//////////////////// Optimization of HttpPost Create Action //////////////////////////////
/// the code in this stage is not optimize because we have 3 query of database 
/// we can define foreign key for Artist and Genre do avoid unnecessary queries 
/// benefit of Foreign KEy: they save us from unnecessary queries to load related objects. 
27. Add ArtistId and GenreId to Gig.cs (make them required instead of its navigation property.

28. Add-Migration AddForeignKeyPropertiesToGig + Update-Database
	in gig object: replace Artist with ArtistId and Genre with GenreId

29. Remove 2 unnecessary queries from HttpPost Create Action and refactoring code.

/////////////// Separation of concern : Responsibility of Controller and View ////////////
/// Controller not responsible for parsing string value into DateTime object.  
/// Controller shoud act as a coordinator for application logic: WHAT SHOULD HAPPEN NEXT! 
/// Controller is like a manager. Not do the actual work. 
/// Information Expert Pronciple: Class/Object that has the information to do sth, should be the one  
/// that will carry that responsibility. So the viewModel is the class that knows about Date and Time!
30. Transfer the parsing Date and Time task from Controller to ViewModel class.

///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////// 07. Implementing Validation /////////////////////////////////////
/////////////////////////// Server Side Validation ///////////////////////////////////////
31. 1. Make view model prop required. 2. Add placeholder in view for validation messages 3. Modify Controller: ModelState.IsValid

/// We get an error when not filling textboxes : String was not recognized as a valid DateTime
/// in line 27: get { return DateTime.Parse(string.Format("{0} {1}", Date, Time)); }
/// technically we should not have get this error because apparently it should not reach the line of code for referencing Date and Time.
/// Reason: because mvc use its "reflection" to construct a viewmodel. So its going to touch all prop of viewmodel.
/// Fix Issue: we need to convert this property to a method => mvc not anymore touch datetime property using reflection
32. Convert DateTime prop of viewmodel to GetDateTime() method to avoid reflection error.

/// We get another error : Value cannot be null. Parameter name: items for DropDownList in view ///
/// Reason: Genres is not populated(not initialized)
33. Populate Genres prop of viewmodel before send it back to view.

/////// Implementing Custom Validation for Date and Time (Server Side) ////////
/// Add FutureDate.cs that derive from ValidationAttribute. Add Override IsValid method in it. 
/// Decorate Date prop of viewmodel to [FutureDate] 
/// => at runtime, value parameter in IsValid method in FutureDate would be a value of Date prop in viewmodel
/// At FutureDate.cs perform Date validation and return the result
34. Add FutureDate.cs & override IsValid method in it & decorate Date prop of viewmodel to [FutureDate]

35. Add ValidTime.cs & override IsValid method in it & decorate Time prop of viewmodel to [ValidTime]

/////////////////////// Client Side Validation ///////////////////////////////////////////
/// To check if it is enable -> Inspect - Network tab - click Save : We can see the post request "Create" send to Server
/// Reason : we have not enabled client side validation!
/////// Enabling Client Side Validation /////////
/// There are 2 js files that are responsible for validation in jquery: jquery.validate.js and jquery.validate.unobtrusive.js
/// Microsoft put these 2 files in separate bundle to return them to only pages where we need them.
/// Idea of Bundle : we can get one or more js/css files, put them in a bundle and then at runtime 
/// asp.net will combine them and compress them before returning to the client(for optimization)
/// We do not need to sent them to every request from client. So we need to add jqueryval bundle to our Create.chtml
/// @RenderSection in _Layout.chtml : use for adding additional scripts to a page. So in that section we add jquery validation.
36. Add @section scripts with jqueryval bundle to Create view for client side validation.

// The reason we need section scripts in view : to ensure that the jqueryval bundle comes after jquery definition.
// at this point both jquery and bootstrap are downloaded
// Fresh Download of page from server : add ? at the end of url - Clear all request in Network tab then Save.



///////////////////////// 08. Preventing Common Web Application Vulnerabilities //////////////////////////////
////////////// SQL Injection ////////////////////
/// Allow an attacker to execute malicious SQL statements in your application. : Get the list of all users, delete a record...
/// var sql = "select * from users where userId = " + userId  => input: "1243 or 1" always true
/// change sql = "select * from users where userId = @userId"
/// in out application we dont have this vulnerability because we are not generating sql at runtime => let EF generate sql statements
/// DANGEROUS: _context.Gigs.SqlQuery("select * ...", input)

///////// Cross-site Scripting (XSS)//////////////
/// Enable an attacker to execute malicious script on the victim's computer : they steal the user's cookies and highjack session
/// They can also access to user's Geo-Location, Webcam, File System and ...
/// Attacker insert malicious js into the pages of trusted website.
/// Prevent : 1. Escaping content: tell browser to treat the content as a simple string and not interprete at any other way.
/// <script> --> Escape: &lt;script&gt;
/// in out application we dont have this vulnerability because MVC rejects js in the input fileds of the form.
/// also Razor view automatically escape content.	Exception: Html.Raw()

//////// Cross-site Request Forgery (CSRF)////////
/// Allow an attacker to perfor actions on behalf of a user without their knowledge.
/// Prevent: use @Html.AntiForgeryToken() in view and decorate [ValidateAntiForgeryToken] in Controller
37. Add @Html.AntiForgeryToken() in Create.chtml and decorate Create action with [ValidateAntiForgeryToken]

/// inspect - Elements - in Form : <input ...type="hidden" value="Random Token" ...>  This is the first part(Generate hidden field)
/// Second part: Its also created a cookie that includes the encripted version of this token:  
/// to see this encrypted token: in inspect go to Application - Cookies - __RequestVerificationToken
/// The attacker may be able to steals the user's cookie but they won't have access to hidden field because
/// the only way to get the hidden field is to get the user to visit the trusted page! not the malicious page.
/// Test: Delete random token(value="random token") and try to post 


/////////////////////////////// 09. Moving Towards a Beautiful Design ////////////////////////////////////////
///// Change the color of navigation bar /////////
/// R-click on it and inspect: click on its parents(<div class="navbar navbar-inverse navbar-fixed-top">) 
/// change backgrounf-color="FF4342" and border-color="FF4342" in the right 
/// Add these changes to our stylesheet: 
/// copy the right side of inspect, open Site.css, at the end of it add a comment: /* Bootstrap Override */ then paste the css

//////////// Make the links white ////////////////
/// R-click on one link + inspect: at right .navbar-inverse .navbar-nav : change the color="#FFF" + copy and paste to Site.css

///////// Make 'Application name' white //////////
/// R-click on one link + inspect: at right .navbar-inverse .navbar-brand : change the color="#FFF" + copy and paste to Site.css
38. Bootstrap Override: find the proper css with the help of inspect elements and copy and paste it at the end of Site.css and Save.
/// To force chrome to reaload css and js: CTRL + SHIFT + R

////////////// Choosing a Font ///////////////////
/// Go to fonts.google.com. Choose Open Sans & Lato & Montserrat => +Select this font. 
/// In customize select font size regular:400 bold:700
/// Copy entire embeded line href and open _Layout.chtml and paste it in <Head> just before Render and Save
/// To compare and feel changes: open Home page on another tab too and do the following change in it:
/// R-click on any character - Inspect - Computed tab - Find font-family - click to go to definition in css
/// Notice that we have definition on line 313: bootstrap.css:313
/// select 'Helvetica Neue' and change it to 'Open Sans' and Enter. Still not feel any changes!
/// We need to change the Heading fonts also : R-Click on a heading. on the right it is a section for h1 h2 h3 ... h6
/// Notice that we have definition on line 474: bootstrap.css:474 
/// select 'Helvetica Neue' and change it to 'Open Sans' and Enter. 
/// Now we can compare it to old tab!!! specially headings are changed
/// To change in VS : Open bootstrap.css Search for 'Helv'. copy h1,h2,... to Site.css. Add Lato in front of another fonts
/// Insert 'body,' at the beginnig of block. Delete 'line-height' and 'color' lines. Delete unwanted font from <link href=...>
39. Add <link href...> for wanted font in <head> in _Layout.chtml. Copy related css from bootstrap and paste in in Site.css

//////// Increase the margin of DIV //////////////
/// R-Click on a lable. Hold the mouse pointer on <div class="form-group"> : Blue area is div and yellow area is the margin
/// With the <div class="form-group" selected : on the right side we can change 'margin-bottom' with arrow key up and down.
/// Increase it to 20px. Copy the block of css and paste at the end of Site.css

/////// Increase the Font Size of NavBar /////////
/// R-Click on a text in page. Go to Computed -> font-size -> go to definition -> increase to 17px;
/// Create body { font-size: 17px;} above h1,h2,h3... in Site.css

/////// Increase the font size inside inputs /////
/// R-Click on a text inside an input. in the right side in form-control, find font-size and increase it to 17px;. Or
/// instead we can Go to Computed -> font-size -> go to definition -> increase to 17px;
/// Create .form-control { font-size: 17px;} at the bottom of Site.css

//////// Increase Padding/Size of TextBoxes //////
/// Out TextBoxes are too small. We want more chunky TextBox
/// R-Click on a TextBox. in the right side in form-control, find padding and increase it to 20px; 15px;
/// add 'padding: 20px 15px;' in .form-control block that we already created in Site.css

/////// Add more Roundness to the TextBoxes //////
/// add 'border-radius: 9px;' in .form-control block that we already created in Site.css

///////// Improve the look of Button /////////////
/// .btn { font-size: 17px; padding: 7px 20px; border-radius: 9px;}
40. Increase DIV margin, Font size and shape and roundness of elements in form